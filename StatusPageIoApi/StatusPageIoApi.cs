using Newtonsoft.Json;

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading;
using System.Threading.Tasks;

namespace SergiyE.StatusPageIoApi {

    public partial class StatusPageIoApi {

        private readonly HttpClient httpClient;
        private readonly Lazy<JsonSerializerSettings> settings;

        public StatusPageIoApi(HttpClient httpClient) {
            this.httpClient = httpClient;
            settings = new Lazy<JsonSerializerSettings>(CreateSerializerSettings);
        }

        public string BaseUrl { get; set; } = "https://api.statuspage.io/v1";

        protected JsonSerializerSettings JsonSerializerSettings => settings.Value;

        public bool ReadResponseAsString { get; set; }

        private JsonSerializerSettings CreateSerializerSettings() {
            var settings = new JsonSerializerSettings();
            UpdateJsonSerializerSettings(settings);
            return settings;
        }

        partial void UpdateJsonSerializerSettings(JsonSerializerSettings settings);

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request,
            string url);

        partial void PrepareRequest(HttpClient client, HttpRequestMessage request,
            StringBuilder urlBuilder);

        partial void ProcessResponse(HttpClient client, HttpResponseMessage response);

        /// <summary>
        /// Get a list of pages
        /// </summary>
        /// <remarks>
        /// Get a list of pages
        /// </remarks>
        /// <returns>Get a list of pages</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Page>> GetPagesAsync() {
            return GetPagesAsync(CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of pages
        /// </summary>
        /// <remarks>
        /// Get a list of pages
        /// </remarks>
        /// <returns>Get a list of pages</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Page>> GetPagesAsync(CancellationToken cancellationToken) {
            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages");

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ = Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Page>>(response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a page
        /// </summary>
        /// <remarks>
        /// Update a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Page> PatchPagesPageIdAsync(string page_id, PatchPages body) {
            return PatchPagesPageIdAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a page
        /// </summary>
        /// <remarks>
        /// Update a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Page> PatchPagesPageIdAsync(string page_id, PatchPages body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Page>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a page
        /// </summary>
        /// <remarks>
        /// Update a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Page> PutPagesPageIdAsync(string page_id, PutPages body) {
            return PutPagesPageIdAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a page
        /// </summary>
        /// <remarks>
        /// Update a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Page> PutPagesPageIdAsync(string page_id, PutPages body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Page>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a page
        /// </summary>
        /// <remarks>
        /// Get a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Page> GetPagesPageIdAsync(string page_id) {
            return GetPagesPageIdAsync(page_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a page
        /// </summary>
        /// <remarks>
        /// Get a page
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a page</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Page> GetPagesPageIdAsync(string page_id,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Page>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add a page access user
        /// </summary>
        /// <remarks>
        /// Add a page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Add a page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser> PostPagesPageIdPageAccessUsersAsync(string page_id,
            PostPagesPageIdPageAccessUsers body) {
            return PostPagesPageIdPageAccessUsersAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add a page access user
        /// </summary>
        /// <remarks>
        /// Add a page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Add a page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser> PostPagesPageIdPageAccessUsersAsync(
            string page_id, PostPagesPageIdPageAccessUsers body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 409) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>(
                                "The request could not be processed due to a conflict in resource state.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of page access users
        /// </summary>
        /// <remarks>
        /// Get a list of page access users
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="email">Email address to search for</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of page access users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<PageAccessUser>>
            GetPagesPageIdPageAccessUsersAsync(string page_id, string email, int? page, int? per_page) {
            return GetPagesPageIdPageAccessUsersAsync(page_id, email, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of page access users
        /// </summary>
        /// <remarks>
        /// Get a list of page access users
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="email">Email address to search for</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of page access users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<PageAccessUser>>
            GetPagesPageIdPageAccessUsersAsync(string page_id, string email, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (email != null) {
                urlBuilder_.Append(Uri.EscapeDataString("email") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(email,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<PageAccessUser>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update page access user
        /// </summary>
        /// <remarks>
        /// Update page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Update page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser> PatchPagesPageIdPageAccessUsersPageAccessUserIdAsync(
            string page_id, string page_access_user_id) {
            return PatchPagesPageIdPageAccessUsersPageAccessUserIdAsync(page_id, page_access_user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update page access user
        /// </summary>
        /// <remarks>
        /// Update page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Update page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PatchPagesPageIdPageAccessUsersPageAccessUserIdAsync(string page_id, string page_access_user_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update page access user
        /// </summary>
        /// <remarks>
        /// Update page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Update page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser> PutPagesPageIdPageAccessUsersPageAccessUserIdAsync(
            string page_id, string page_access_user_id) {
            return PutPagesPageIdPageAccessUsersPageAccessUserIdAsync(page_id, page_access_user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update page access user
        /// </summary>
        /// <remarks>
        /// Update page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Update page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PutPagesPageIdPageAccessUsersPageAccessUserIdAsync(string page_id, string page_access_user_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete page access user
        /// </summary>
        /// <remarks>
        /// Delete page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Delete page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task DeletePagesPageIdPageAccessUsersPageAccessUserIdAsync(string page_id,
            string page_access_user_id) {
            return DeletePagesPageIdPageAccessUsersPageAccessUserIdAsync(page_id, page_access_user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete page access user
        /// </summary>
        /// <remarks>
        /// Delete page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Delete page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task DeletePagesPageIdPageAccessUsersPageAccessUserIdAsync(
            string page_id, string page_access_user_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204) {
                            return;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get page access user
        /// </summary>
        /// <remarks>
        /// Get page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Get page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser> GetPagesPageIdPageAccessUsersPageAccessUserIdAsync(
            string page_id, string page_access_user_id) {
            return GetPagesPageIdPageAccessUsersPageAccessUserIdAsync(page_id, page_access_user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get page access user
        /// </summary>
        /// <remarks>
        /// Get page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Get page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            GetPagesPageIdPageAccessUsersPageAccessUserIdAsync(string page_id, string page_access_user_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add components for page access user
        /// </summary>
        /// <remarks>
        /// Add components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents body) {
            return PatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add components for page access user
        /// </summary>
        /// <remarks>
        /// Add components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PatchPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add components for page access user
        /// </summary>
        /// <remarks>
        /// Add components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PutPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PutPagesPageIdPageAccessUsersPageAccessUserIdComponents body) {
            return PutPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add components for page access user
        /// </summary>
        /// <remarks>
        /// Add components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PutPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PutPagesPageIdPageAccessUsersPageAccessUserIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace components for page access user
        /// </summary>
        /// <remarks>
        /// Replace components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Replace components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PostPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PostPagesPageIdPageAccessUsersPageAccessUserIdComponents body) {
            return PostPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace components for page access user
        /// </summary>
        /// <remarks>
        /// Replace components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Replace components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PostPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                PostPagesPageIdPageAccessUsersPageAccessUserIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove components for page access user
        /// </summary>
        /// <remarks>
        /// Remove components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Remove components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents body) {
            return DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove components for page access user
        /// </summary>
        /// <remarks>
        /// Remove components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Remove components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get components for page access user
        /// </summary>
        /// <remarks>
        /// Get components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Component>>
            GetPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                int? page, int? per_page) {
            return GetPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(page_id, page_access_user_id, page,
                per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get components for page access user
        /// </summary>
        /// <remarks>
        /// Get components for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get components for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Component>>
            GetPagesPageIdPageAccessUsersPageAccessUserIdComponentsAsync(string page_id, string page_access_user_id,
                int? page, int? per_page, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Component>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove component for page access user
        /// </summary>
        /// <remarks>
        /// Remove component for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove component for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync(string page_id,
                string page_access_user_id, string component_id) {
            return DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync(page_id,
                page_access_user_id, component_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove component for page access user
        /// </summary>
        /// <remarks>
        /// Remove component for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove component for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdComponentsComponentIdAsync(string page_id,
                string page_access_user_id, string component_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add metrics for page access user
        /// </summary>
        /// <remarks>
        /// Add metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics body) {
            return PatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add metrics for page access user
        /// </summary>
        /// <remarks>
        /// Add metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PatchPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add metrics for page access user
        /// </summary>
        /// <remarks>
        /// Add metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PutPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics body) {
            return PutPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add metrics for page access user
        /// </summary>
        /// <remarks>
        /// Add metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Add metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PutPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace metrics for page access user
        /// </summary>
        /// <remarks>
        /// Replace metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Replace metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            PostPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics body) {
            return PostPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace metrics for page access user
        /// </summary>
        /// <remarks>
        /// Replace metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Replace metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            PostPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete metrics for page access user
        /// </summary>
        /// <remarks>
        /// Delete metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Delete metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics body) {
            return DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(page_id, page_access_user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete metrics for page access user
        /// </summary>
        /// <remarks>
        /// Delete metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <returns>Delete metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get metrics for page access user
        /// </summary>
        /// <remarks>
        /// Get metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Metric>>
            GetPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                int? page,
                int? per_page) {
            return GetPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(page_id, page_access_user_id, page,
                per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get metrics for page access user
        /// </summary>
        /// <remarks>
        /// Get metrics for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get metrics for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Metric>>
            GetPagesPageIdPageAccessUsersPageAccessUserIdMetricsAsync(string page_id, string page_access_user_id,
                int? page,
                int? per_page, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Metric>>(response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete metric for page access user
        /// </summary>
        /// <remarks>
        /// Delete metric for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="metric_id">Identifier of metric requested</param>
        /// <returns>Delete metric for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdAsync(string page_id,
                string page_access_user_id,
                string metric_id) {
            return DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdAsync(page_id, page_access_user_id,
                metric_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete metric for page access user
        /// </summary>
        /// <remarks>
        /// Delete metric for page access user
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_user_id">Page Access User Identifier</param>
        /// <param name="metric_id">Identifier of metric requested</param>
        /// <returns>Delete metric for page access user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessUser>
            DeletePagesPageIdPageAccessUsersPageAccessUserIdMetricsMetricIdAsync(string page_id,
                string page_access_user_id,
                string metric_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_user_id == null)
                throw new ArgumentNullException("page_access_user_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_users/{page_access_user_id}/metrics/{metric_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_user_id}",
                Uri.EscapeDataString(ConvertToString(page_access_user_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessUser>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of page access groups
        /// </summary>
        /// <remarks>
        /// Get a list of page access groups
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of page access groups</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<PageAccessGroup>>
            GetPagesPageIdPageAccessGroupsAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdPageAccessGroupsAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of page access groups
        /// </summary>
        /// <remarks>
        /// Get a list of page access groups
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of page access groups</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<PageAccessGroup>>
            GetPagesPageIdPageAccessGroupsAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<PageAccessGroup>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a page access group
        /// </summary>
        /// <remarks>
        /// Create a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup> PostPagesPageIdPageAccessGroupsAsync(string page_id,
            PostPagesPageIdPageAccessGroups body) {
            return PostPagesPageIdPageAccessGroupsAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a page access group
        /// </summary>
        /// <remarks>
        /// Create a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup> PostPagesPageIdPageAccessGroupsAsync(
            string page_id, PostPagesPageIdPageAccessGroups body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a page access group
        /// </summary>
        /// <remarks>
        /// Get a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Get a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            GetPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id) {
            return GetPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(page_id, page_access_group_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a page access group
        /// </summary>
        /// <remarks>
        /// Get a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Get a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            GetPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a page access group
        /// </summary>
        /// <remarks>
        /// Update a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Update a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            PatchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                PatchPagesPageIdPageAccessGroups body) {
            return PatchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(page_id, page_access_group_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a page access group
        /// </summary>
        /// <remarks>
        /// Update a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Update a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            PatchPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                PatchPagesPageIdPageAccessGroups body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a page access group
        /// </summary>
        /// <remarks>
        /// Update a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Update a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            PutPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                PutPagesPageIdPageAccessGroups body) {
            return PutPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(page_id, page_access_group_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a page access group
        /// </summary>
        /// <remarks>
        /// Update a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Update a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            PutPagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                PutPagesPageIdPageAccessGroups body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a page access group
        /// </summary>
        /// <remarks>
        /// Remove a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Remove a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id) {
            return DeletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync(page_id, page_access_group_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a page access group
        /// </summary>
        /// <remarks>
        /// Remove a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Remove a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdAsync(string page_id, string page_access_group_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add components to page access group
        /// </summary>
        /// <remarks>
        /// Add components to page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Add components to page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id,
                string page_access_group_id,
                PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body) {
            return PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(page_id, page_access_group_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add components to page access group
        /// </summary>
        /// <remarks>
        /// Add components to page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Add components to page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id,
                string page_access_group_id,
                PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add components to page access group
        /// </summary>
        /// <remarks>
        /// Add components to page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Add components to page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body) {
            return PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(page_id, page_access_group_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add components to page access group
        /// </summary>
        /// <remarks>
        /// Add components to page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Add components to page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Replace components for a page access group
        /// </summary>
        /// <remarks>
        /// Replace components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Replace components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body) {
            return PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(page_id, page_access_group_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Replace components for a page access group
        /// </summary>
        /// <remarks>
        /// Replace components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Replace components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete components for a page access group
        /// </summary>
        /// <remarks>
        /// Delete components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Delete components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id,
                string page_access_group_id,
                DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents body) {
            return DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(page_id, page_access_group_id,
                body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete components for a page access group
        /// </summary>
        /// <remarks>
        /// Delete components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <returns>Delete components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id,
                string page_access_group_id,
                DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List components for a page access group
        /// </summary>
        /// <remarks>
        /// List components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>List components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Component>>
            GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                int? page, int? per_page) {
            return GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(page_id, page_access_group_id, page,
                per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List components for a page access group
        /// </summary>
        /// <remarks>
        /// List components for a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>List components for a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Component>>
            GetPagesPageIdPageAccessGroupsPageAccessGroupIdComponentsAsync(string page_id, string page_access_group_id,
                int? page, int? per_page, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Component>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove a component from a page access group
        /// </summary>
        /// <remarks>
        /// Remove a component from a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove a component from a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdAsync(string page_id,
                string page_access_group_id, string component_id) {
            return DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdAsync(page_id,
                page_access_group_id, component_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove a component from a page access group
        /// </summary>
        /// <remarks>
        /// Remove a component from a page access group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page_access_group_id">Page Access Group Identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove a component from a page access group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<PageAccessGroup>
            DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponentsComponentIdAsync(string page_id,
                string page_access_group_id, string component_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (page_access_group_id == null)
                throw new ArgumentNullException("page_access_group_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/page_access_groups/{page_access_group_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{page_access_group_id}",
                Uri.EscapeDataString(ConvertToString(page_access_group_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<PageAccessGroup>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Resend confirmations to a list of subscribers
        /// </summary>
        /// <remarks>
        /// Resend confirmations to a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Resend confirmations to a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task PostPagesPageIdSubscribersResendConfirmationAsync(string page_id,
            PostPagesPageIdSubscribersResendConfirmation body) {
            return PostPagesPageIdSubscribersResendConfirmationAsync(page_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resend confirmations to a list of subscribers
        /// </summary>
        /// <remarks>
        /// Resend confirmations to a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Resend confirmations to a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task PostPagesPageIdSubscribersResendConfirmationAsync(
            string page_id, PostPagesPageIdSubscribersResendConfirmation body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/resend_confirmation");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            return;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unsubscribe a list of subscribers
        /// </summary>
        /// <remarks>
        /// Unsubscribe a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Unsubscribe a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task PostPagesPageIdSubscribersUnsubscribeAsync(string page_id,
            PostPagesPageIdSubscribersUnsubscribe body) {
            return PostPagesPageIdSubscribersUnsubscribeAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe a list of subscribers
        /// </summary>
        /// <remarks>
        /// Unsubscribe a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Unsubscribe a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task PostPagesPageIdSubscribersUnsubscribeAsync(string page_id,
            PostPagesPageIdSubscribersUnsubscribe body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/unsubscribe");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            return;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reactivate a list of subscribers
        /// </summary>
        /// <remarks>
        /// Reactivate a list of quarantined subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Reactivate a list of quarantined subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task PostPagesPageIdSubscribersReactivateAsync(string page_id,
            PostPagesPageIdSubscribersReactivate body) {
            return PostPagesPageIdSubscribersReactivateAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reactivate a list of subscribers
        /// </summary>
        /// <remarks>
        /// Reactivate a list of quarantined subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Reactivate a list of quarantined subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task PostPagesPageIdSubscribersReactivateAsync(string page_id,
            PostPagesPageIdSubscribersReactivate body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/reactivate");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            return;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a histogram of subscribers by type and then state
        /// </summary>
        /// <remarks>
        /// Get a histogram of subscribers by type and then state
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a histogram of subscribers by type and then state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<SubscriberCountByTypeAndState>
            GetPagesPageIdSubscribersHistogramByStateAsync(string page_id) {
            return GetPagesPageIdSubscribersHistogramByStateAsync(page_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a histogram of subscribers by type and then state
        /// </summary>
        /// <remarks>
        /// Get a histogram of subscribers by type and then state
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a histogram of subscribers by type and then state</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<SubscriberCountByTypeAndState>
            GetPagesPageIdSubscribersHistogramByStateAsync(string page_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/histogram_by_state");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<SubscriberCountByTypeAndState>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a count of subscribers by type
        /// </summary>
        /// <remarks>
        /// Get a count of subscribers by type
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="type">If this is present, only count subscribers of this type.</param>
        /// <param name="state">If this is present, only count subscribers in this state. Specify state "all" to count subscribers in any states.</param>
        /// <returns>Get a count of subscribers by type</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<SubscriberCountByType> GetPagesPageIdSubscribersCountAsync(
            string page_id, Type? type, State? state) {
            return GetPagesPageIdSubscribersCountAsync(page_id, type, state, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a count of subscribers by type
        /// </summary>
        /// <remarks>
        /// Get a count of subscribers by type
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="type">If this is present, only count subscribers of this type.</param>
        /// <param name="state">If this is present, only count subscribers in this state. Specify state "all" to count subscribers in any states.</param>
        /// <returns>Get a count of subscribers by type</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<SubscriberCountByType> GetPagesPageIdSubscribersCountAsync(
            string page_id, Type? type, State? state, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/count?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (type != null) {
                urlBuilder_.Append(Uri.EscapeDataString("type") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(type,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (state != null) {
                urlBuilder_.Append(Uri.EscapeDataString("state") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(state,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<SubscriberCountByType>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of unsubscribed subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of unsubscribed subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of unsubscribed subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Subscriber>>
            GetPagesPageIdSubscribersUnsubscribedAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdSubscribersUnsubscribedAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of unsubscribed subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of unsubscribed subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of unsubscribed subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Subscriber>>
            GetPagesPageIdSubscribersUnsubscribedAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/unsubscribed?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Subscriber>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a subscriber
        /// </summary>
        /// <remarks>
        /// Create a subscriber. Not applicable for Slack subscribers.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a subscriber. Not applicable for Slack subscribers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber> PostPagesPageIdSubscribersAsync(string page_id,
            PostPagesPageIdSubscribers body) {
            return PostPagesPageIdSubscribersAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a subscriber
        /// </summary>
        /// <remarks>
        /// Create a subscriber. Not applicable for Slack subscribers.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a subscriber. Not applicable for Slack subscribers.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber> PostPagesPageIdSubscribersAsync(string page_id,
            PostPagesPageIdSubscribers body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/subscribers");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="q">If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers.</param>
        /// <param name="type">If specified, only return subscribers of the indicated type.</param>
        /// <param name="state">If this is present, only return subscribers in this state. Specify state "all" to find subscribers in any states.</param>
        /// <param name="limit">The maximum number of rows to return. If a text query string is specified (q=), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. Beginning February 28, 2023, a default limit of 100 will be imposed and this endpoint will return paginated data (i.e. will no longer return all subscribers) even if this query parameter is not provided.</param>
        /// <param name="page">The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="sort_field">The field on which to sort: 'primary' to indicate sorting by the identifying field, 'created_at' for sorting by creation timestamp, 'quarantined_at' for sorting by quarantine timestamp, and 'relevance' which sorts by the relevancy of the search text. 'relevance' is not a valid parameter if no search text is supplied.</param>
        /// <param name="sort_direction">The sort direction of the listing.</param>
        /// <returns>Get a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Subscriber>>
            GetPagesPageIdSubscribersAsync(string page_id, string q, Type2? type, State2? state, int? limit, int? page,
                Sort_field? sort_field, Sort_direction? sort_direction) {
            return GetPagesPageIdSubscribersAsync(page_id, q, type, state, limit, page, sort_field, sort_direction,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="q">If this is specified, search the contact information (email, endpoint, or phone number) for the provided value. This parameter doesn’t support searching for Slack subscribers.</param>
        /// <param name="type">If specified, only return subscribers of the indicated type.</param>
        /// <param name="state">If this is present, only return subscribers in this state. Specify state "all" to find subscribers in any states.</param>
        /// <param name="limit">The maximum number of rows to return. If a text query string is specified (q=), the default and maximum limit is 100. If the text query string is not specified, the default and maximum limit are not set, and not providing a limit will return all the subscribers. Beginning February 28, 2023, a default limit of 100 will be imposed and this endpoint will return paginated data (i.e. will no longer return all subscribers) even if this query parameter is not provided.</param>
        /// <param name="page">The page offset of subscribers. The first page is page 0, the second page 1, etc. This skips page * limit subscribers. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="sort_field">The field on which to sort: 'primary' to indicate sorting by the identifying field, 'created_at' for sorting by creation timestamp, 'quarantined_at' for sorting by quarantine timestamp, and 'relevance' which sorts by the relevancy of the search text. 'relevance' is not a valid parameter if no search text is supplied.</param>
        /// <param name="sort_direction">The sort direction of the listing.</param>
        /// <returns>Get a list of subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Subscriber>>
            GetPagesPageIdSubscribersAsync(string page_id, string q, Type2? type, State2? state, int? limit, int? page,
                Sort_field? sort_field, Sort_direction? sort_direction,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/subscribers?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (q != null) {
                urlBuilder_.Append(Uri.EscapeDataString("q") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(q,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (type != null) {
                urlBuilder_.Append(Uri.EscapeDataString("type") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(type,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (state != null) {
                urlBuilder_.Append(Uri.EscapeDataString("state") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(state,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (limit != null) {
                urlBuilder_.Append(Uri.EscapeDataString("limit") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(limit,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (sort_field != null) {
                urlBuilder_.Append(Uri.EscapeDataString("sort_field") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(sort_field,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (sort_direction != null) {
                urlBuilder_.Append(Uri.EscapeDataString("sort_direction") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(sort_direction,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Subscriber>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Resend confirmation to a subscriber
        /// </summary>
        /// <remarks>
        /// Resend confirmation to a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Resend confirmation to a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task PostPagesPageIdSubscribersSubscriberIdResendConfirmationAsync(
            string page_id, string subscriber_id) {
            return PostPagesPageIdSubscribersSubscriberIdResendConfirmationAsync(page_id, subscriber_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resend confirmation to a subscriber
        /// </summary>
        /// <remarks>
        /// Resend confirmation to a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Resend confirmation to a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task PostPagesPageIdSubscribersSubscriberIdResendConfirmationAsync(
            string page_id, string subscriber_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/{subscriber_id}/resend_confirmation");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            return;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unsubscribe a subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribe a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <param name="skip_unsubscription_notification">If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed.</param>
        /// <returns>Unsubscribe a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber> DeletePagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id, bool? skip_unsubscription_notification) {
            return DeletePagesPageIdSubscribersSubscriberIdAsync(page_id, subscriber_id,
                skip_unsubscription_notification, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe a subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribe a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <param name="skip_unsubscription_notification">If skip_unsubscription_notification is true, the subscriber does not receive any notifications when they are unsubscribed.</param>
        /// <returns>Unsubscribe a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber> DeletePagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id, bool? skip_unsubscription_notification,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/{subscriber_id}?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));
            if (skip_unsubscription_notification != null) {
                urlBuilder_.Append(Uri.EscapeDataString("skip_unsubscription_notification") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(skip_unsubscription_notification,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a subscriber
        /// </summary>
        /// <remarks>
        /// Update a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Update a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber> PatchPagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id, PatchPagesPageIdSubscribers body) {
            return PatchPagesPageIdSubscribersSubscriberIdAsync(page_id, subscriber_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a subscriber
        /// </summary>
        /// <remarks>
        /// Update a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Update a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber> PatchPagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id, PatchPagesPageIdSubscribers body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/{subscriber_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a subscriber
        /// </summary>
        /// <remarks>
        /// Get a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Get a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber> GetPagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id) {
            return GetPagesPageIdSubscribersSubscriberIdAsync(page_id, subscriber_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a subscriber
        /// </summary>
        /// <remarks>
        /// Get a subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Get a subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber> GetPagesPageIdSubscribersSubscriberIdAsync(
            string page_id, string subscriber_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/subscribers/{subscriber_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Create a template
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<IncidentTemplate> PostPagesPageIdIncidentTemplatesAsync(
            string page_id, PostPagesPageIdIncidentTemplates body) {
            return PostPagesPageIdIncidentTemplatesAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a template
        /// </summary>
        /// <remarks>
        /// Create a template
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a template</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<IncidentTemplate> PostPagesPageIdIncidentTemplatesAsync(
            string page_id, PostPagesPageIdIncidentTemplates body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incident_templates");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<IncidentTemplate>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of templates
        /// </summary>
        /// <remarks>
        /// Get a list of templates
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of templates</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<IncidentTemplate>>
            GetPagesPageIdIncidentTemplatesAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdIncidentTemplatesAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of templates
        /// </summary>
        /// <remarks>
        /// Get a list of templates
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of templates</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<IncidentTemplate>>
            GetPagesPageIdIncidentTemplatesAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incident_templates?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<IncidentTemplate>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an incident
        /// </summary>
        /// <remarks>
        /// Create an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Incident> PostPagesPageIdIncidentsAsync(string page_id,
            PostPagesPageIdIncidents body) {
            return PostPagesPageIdIncidentsAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an incident
        /// </summary>
        /// <remarks>
        /// Create an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Incident> PostPagesPageIdIncidentsAsync(string page_id,
            PostPagesPageIdIncidents body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/incidents");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Incident>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of incidents
        /// </summary>
        /// <remarks>
        /// Get a list of incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="q">If this is specified, search for the text query string in the incidents' name, status, postmortem_body, and incident_updates fields.</param>
        /// <param name="limit">The maximum number of rows to return per page. The default and maximum limit is 100.</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <returns>Get a list of incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Incident>>
            GetPagesPageIdIncidentsAsync(string page_id, string q, int? limit, int? page) {
            return GetPagesPageIdIncidentsAsync(page_id, q, limit, page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of incidents
        /// </summary>
        /// <remarks>
        /// Get a list of incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="q">If this is specified, search for the text query string in the incidents' name, status, postmortem_body, and incident_updates fields.</param>
        /// <param name="limit">The maximum number of rows to return per page. The default and maximum limit is 100.</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <returns>Get a list of incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Incident>>
            GetPagesPageIdIncidentsAsync(string page_id, string q, int? limit, int? page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/incidents?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (q != null) {
                urlBuilder_.Append(Uri.EscapeDataString("q") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(q,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (limit != null) {
                urlBuilder_.Append(Uri.EscapeDataString("limit") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(limit,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Incident>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of active maintenances
        /// </summary>
        /// <remarks>
        /// Get a list of active maintenances
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of active maintenances</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Incident>>
            GetPagesPageIdIncidentsActiveMaintenanceAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdIncidentsActiveMaintenanceAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of active maintenances
        /// </summary>
        /// <remarks>
        /// Get a list of active maintenances
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of active maintenances</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Incident>>
            GetPagesPageIdIncidentsActiveMaintenanceAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/active_maintenance?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Incident>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of upcoming incidents
        /// </summary>
        /// <remarks>
        /// Get a list of upcoming incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of upcoming incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Incident>>
            GetPagesPageIdIncidentsUpcomingAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdIncidentsUpcomingAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of upcoming incidents
        /// </summary>
        /// <remarks>
        /// Get a list of upcoming incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of upcoming incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Incident>>
            GetPagesPageIdIncidentsUpcomingAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/upcoming?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Incident>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of scheduled incidents
        /// </summary>
        /// <remarks>
        /// Get a list of scheduled incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of scheduled incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Incident>>
            GetPagesPageIdIncidentsScheduledAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdIncidentsScheduledAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of scheduled incidents
        /// </summary>
        /// <remarks>
        /// Get a list of scheduled incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of scheduled incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Incident>>
            GetPagesPageIdIncidentsScheduledAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/scheduled?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Incident>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of unresolved incidents
        /// </summary>
        /// <remarks>
        /// Get a list of unresolved incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of unresolved incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Incident>>
            GetPagesPageIdIncidentsUnresolvedAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdIncidentsUnresolvedAsync(page_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of unresolved incidents
        /// </summary>
        /// <remarks>
        /// Get a list of unresolved incidents
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch.</param>
        /// <param name="per_page">Number of results to return per page.</param>
        /// <returns>Get a list of unresolved incidents</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Incident>>
            GetPagesPageIdIncidentsUnresolvedAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/unresolved?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Incident>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete an incident
        /// </summary>
        /// <remarks>
        /// Delete an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Delete an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Incident> DeletePagesPageIdIncidentsIncidentIdAsync(string page_id,
            string incident_id) {
            return DeletePagesPageIdIncidentsIncidentIdAsync(page_id, incident_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete an incident
        /// </summary>
        /// <remarks>
        /// Delete an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Delete an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Incident> DeletePagesPageIdIncidentsIncidentIdAsync(
            string page_id, string incident_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Incident>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Update an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Update an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Incident> PatchPagesPageIdIncidentsIncidentIdAsync(string page_id,
            string incident_id, PatchPagesPageIdIncidents body) {
            return PatchPagesPageIdIncidentsIncidentIdAsync(page_id, incident_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Update an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Update an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Incident> PatchPagesPageIdIncidentsIncidentIdAsync(
            string page_id, string incident_id, PatchPagesPageIdIncidents body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Incident>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Update an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Update an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Incident> PutPagesPageIdIncidentsIncidentIdAsync(string page_id,
            string incident_id, PutPagesPageIdIncidents body) {
            return PutPagesPageIdIncidentsIncidentIdAsync(page_id, incident_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update an incident
        /// </summary>
        /// <remarks>
        /// Update an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Update an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Incident> PutPagesPageIdIncidentsIncidentIdAsync(
            string page_id, string incident_id, PutPagesPageIdIncidents body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Incident>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Get an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Get an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Incident> GetPagesPageIdIncidentsIncidentIdAsync(string page_id,
            string incident_id) {
            return GetPagesPageIdIncidentsIncidentIdAsync(page_id, incident_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an incident
        /// </summary>
        /// <remarks>
        /// Get an incident
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Get an incident</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Incident> GetPagesPageIdIncidentsIncidentIdAsync(
            string page_id, string incident_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Incident>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a previous incident update
        /// </summary>
        /// <remarks>
        /// Update a previous incident update
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="incident_update_id">Incident Update Identifier</param>
        /// <returns>Update a previous incident update</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<IncidentUpdate>
            PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(string page_id, string incident_id,
                string incident_update_id, PatchPagesPageIdIncidentsIncidentIdIncidentUpdates body) {
            return PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(page_id, incident_id,
                incident_update_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a previous incident update
        /// </summary>
        /// <remarks>
        /// Update a previous incident update
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="incident_update_id">Incident Update Identifier</param>
        /// <returns>Update a previous incident update</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<IncidentUpdate>
            PatchPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(string page_id, string incident_id,
                string incident_update_id, PatchPagesPageIdIncidentsIncidentIdIncidentUpdates body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (incident_update_id == null)
                throw new ArgumentNullException("incident_update_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_update_id}",
                Uri.EscapeDataString(ConvertToString(incident_update_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<IncidentUpdate>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a previous incident update
        /// </summary>
        /// <remarks>
        /// Update a previous incident update
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="incident_update_id">Incident Update Identifier</param>
        /// <returns>Update a previous incident update</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<IncidentUpdate>
            PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(string page_id, string incident_id,
                string incident_update_id, PutPagesPageIdIncidentsIncidentIdIncidentUpdates body) {
            return PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(page_id, incident_id,
                incident_update_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a previous incident update
        /// </summary>
        /// <remarks>
        /// Update a previous incident update
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="incident_update_id">Incident Update Identifier</param>
        /// <returns>Update a previous incident update</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<IncidentUpdate>
            PutPagesPageIdIncidentsIncidentIdIncidentUpdatesIncidentUpdateIdAsync(string page_id, string incident_id,
                string incident_update_id, PutPagesPageIdIncidentsIncidentIdIncidentUpdates body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (incident_update_id == null)
                throw new ArgumentNullException("incident_update_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/incident_updates/{incident_update_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_update_id}",
                Uri.EscapeDataString(ConvertToString(incident_update_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<IncidentUpdate>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create an incident subscriber
        /// </summary>
        /// <remarks>
        /// Create an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Create an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber> PostPagesPageIdIncidentsIncidentIdSubscribersAsync(
            string page_id, string incident_id, PostPagesPageIdIncidentsIncidentIdSubscribers body) {
            return PostPagesPageIdIncidentsIncidentIdSubscribersAsync(page_id, incident_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create an incident subscriber
        /// </summary>
        /// <remarks>
        /// Create an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Create an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber> PostPagesPageIdIncidentsIncidentIdSubscribersAsync(
            string page_id, string incident_id, PostPagesPageIdIncidentsIncidentIdSubscribers body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/subscribers");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of incident subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of incident subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of incident subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Subscriber>>
            GetPagesPageIdIncidentsIncidentIdSubscribersAsync(string page_id, string incident_id, int? page,
                int? per_page) {
            return GetPagesPageIdIncidentsIncidentIdSubscribersAsync(page_id, incident_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of incident subscribers
        /// </summary>
        /// <remarks>
        /// Get a list of incident subscribers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of incident subscribers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Subscriber>>
            GetPagesPageIdIncidentsIncidentIdSubscribersAsync(string page_id, string incident_id, int? page,
                int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/subscribers?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Subscriber>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Unsubscribe an incident subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribe an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Unsubscribe an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber>
            DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(string page_id, string incident_id,
                string subscriber_id) {
            return DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(page_id, incident_id, subscriber_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Unsubscribe an incident subscriber
        /// </summary>
        /// <remarks>
        /// Unsubscribe an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Unsubscribe an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber>
            DeletePagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(string page_id, string incident_id,
                string subscriber_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get an incident subscriber
        /// </summary>
        /// <remarks>
        /// Get an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Get an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Subscriber>
            GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(string page_id, string incident_id,
                string subscriber_id) {
            return GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(page_id, incident_id, subscriber_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get an incident subscriber
        /// </summary>
        /// <remarks>
        /// Get an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Get an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Subscriber>
            GetPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdAsync(string page_id, string incident_id,
                string subscriber_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Subscriber>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Resend confirmation to an incident subscriber
        /// </summary>
        /// <remarks>
        /// Resend confirmation to an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Resend confirmation to an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task
            PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync(string page_id,
                string incident_id, string subscriber_id) {
            return PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync(page_id,
                incident_id, subscriber_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Resend confirmation to an incident subscriber
        /// </summary>
        /// <remarks>
        /// Resend confirmation to an incident subscriber
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <param name="subscriber_id">Subscriber Identifier</param>
        /// <returns>Resend confirmation to an incident subscriber</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task
            PostPagesPageIdIncidentsIncidentIdSubscribersSubscriberIdResendConfirmationAsync(string page_id,
                string incident_id, string subscriber_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (subscriber_id == null)
                throw new ArgumentNullException("subscriber_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append(
                "/pages/{page_id}/incidents/{incident_id}/subscribers/{subscriber_id}/resend_confirmation");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{subscriber_id}",
                Uri.EscapeDataString(ConvertToString(subscriber_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            return;
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get Postmortem
        /// </summary>
        /// <remarks>
        /// Get Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Get Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Postmortem> GetPagesPageIdIncidentsIncidentIdPostmortemAsync(
            string page_id, string incident_id) {
            return GetPagesPageIdIncidentsIncidentIdPostmortemAsync(page_id, incident_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get Postmortem
        /// </summary>
        /// <remarks>
        /// Get Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Get Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Postmortem> GetPagesPageIdIncidentsIncidentIdPostmortemAsync(
            string page_id, string incident_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/postmortem");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Postmortem>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create Postmortem
        /// </summary>
        /// <remarks>
        /// Create Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Create Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Postmortem> PutPagesPageIdIncidentsIncidentIdPostmortemAsync(
            string page_id, string incident_id, PutPagesPageIdIncidentsIncidentIdPostmortem body) {
            return PutPagesPageIdIncidentsIncidentIdPostmortemAsync(page_id, incident_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create Postmortem
        /// </summary>
        /// <remarks>
        /// Create Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Create Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Postmortem> PutPagesPageIdIncidentsIncidentIdPostmortemAsync(
            string page_id, string incident_id, PutPagesPageIdIncidentsIncidentIdPostmortem body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/postmortem");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Postmortem>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete Postmortem
        /// </summary>
        /// <remarks>
        /// Delete Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Delete Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task DeletePagesPageIdIncidentsIncidentIdPostmortemAsync(string page_id,
            string incident_id) {
            return DeletePagesPageIdIncidentsIncidentIdPostmortemAsync(page_id, incident_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete Postmortem
        /// </summary>
        /// <remarks>
        /// Delete Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Delete Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task DeletePagesPageIdIncidentsIncidentIdPostmortemAsync(
            string page_id, string incident_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/postmortem");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204) {
                            return;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Publish Postmortem
        /// </summary>
        /// <remarks>
        /// Publish Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Publish Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Postmortem> PutPagesPageIdIncidentsIncidentIdPostmortemPublishAsync(
            string page_id, string incident_id, PutPagesPageIdIncidentsIncidentIdPostmortemPublish body) {
            return PutPagesPageIdIncidentsIncidentIdPostmortemPublishAsync(page_id, incident_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Publish Postmortem
        /// </summary>
        /// <remarks>
        /// Publish Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Publish Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Postmortem>
            PutPagesPageIdIncidentsIncidentIdPostmortemPublishAsync(string page_id, string incident_id,
                PutPagesPageIdIncidentsIncidentIdPostmortemPublish body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/postmortem/publish");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Postmortem>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Revert Postmortem
        /// </summary>
        /// <remarks>
        /// Revert Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Revert Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Postmortem> PutPagesPageIdIncidentsIncidentIdPostmortemRevertAsync(
            string page_id, string incident_id) {
            return PutPagesPageIdIncidentsIncidentIdPostmortemRevertAsync(page_id, incident_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Revert Postmortem
        /// </summary>
        /// <remarks>
        /// Revert Postmortem
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="incident_id">Incident Identifier</param>
        /// <returns>Revert Postmortem</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Postmortem>
            PutPagesPageIdIncidentsIncidentIdPostmortemRevertAsync(string page_id, string incident_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (incident_id == null)
                throw new ArgumentNullException("incident_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/incidents/{incident_id}/postmortem/revert");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{incident_id}",
                Uri.EscapeDataString(ConvertToString(incident_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Postmortem>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a component
        /// </summary>
        /// <remarks>
        /// Create a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> PostPagesPageIdComponentsAsync(string page_id,
            PostPagesPageIdComponents body) {
            return PostPagesPageIdComponentsAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a component
        /// </summary>
        /// <remarks>
        /// Create a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component> PostPagesPageIdComponentsAsync(string page_id,
            PostPagesPageIdComponents body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/components");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of components
        /// </summary>
        /// <remarks>
        /// Get a list of components
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of components</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<Component>>
            GetPagesPageIdComponentsAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdComponentsAsync(page_id, page, per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of components
        /// </summary>
        /// <remarks>
        /// Get a list of components
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of components</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<Component>>
            GetPagesPageIdComponentsAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/components?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<Component>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a component
        /// </summary>
        /// <remarks>
        /// If group_id is "null" then the component will be removed from a group.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Update a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> PatchPagesPageIdComponentsComponentIdAsync(string page_id,
            string component_id, PatchPagesPageIdComponents body) {
            return PatchPagesPageIdComponentsComponentIdAsync(page_id, component_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a component
        /// </summary>
        /// <remarks>
        /// If group_id is "null" then the component will be removed from a group.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Update a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component> PatchPagesPageIdComponentsComponentIdAsync(
            string page_id, string component_id, PatchPagesPageIdComponents body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a component
        /// </summary>
        /// <remarks>
        /// If group_id is "null" then the component will be removed from a group.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Update a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> PutPagesPageIdComponentsComponentIdAsync(string page_id,
            string component_id, PutPagesPageIdComponents body) {
            return PutPagesPageIdComponentsComponentIdAsync(page_id, component_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a component
        /// </summary>
        /// <remarks>
        /// If group_id is "null" then the component will be removed from a group.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Update a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component> PutPagesPageIdComponentsComponentIdAsync(
            string page_id, string component_id, PutPagesPageIdComponents body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a component
        /// </summary>
        /// <remarks>
        /// Delete a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Delete a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task DeletePagesPageIdComponentsComponentIdAsync(string page_id,
            string component_id) {
            return DeletePagesPageIdComponentsComponentIdAsync(page_id, component_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a component
        /// </summary>
        /// <remarks>
        /// Delete a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Delete a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task DeletePagesPageIdComponentsComponentIdAsync(string page_id,
            string component_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 204) {
                            return;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a component
        /// </summary>
        /// <remarks>
        /// Get a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Get a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> GetPagesPageIdComponentsComponentIdAsync(string page_id,
            string component_id) {
            return GetPagesPageIdComponentsComponentIdAsync(page_id, component_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a component
        /// </summary>
        /// <remarks>
        /// Get a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Get a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component> GetPagesPageIdComponentsComponentIdAsync(
            string page_id, string component_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get uptime data for a component
        /// </summary>
        /// <remarks>
        /// Get uptime data for a component that has uptime showcase enabled
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <param name="skip_related_events">Skips supplying the related events data along with the component uptime data.</param>
        /// <param name="start">The start date for uptime calculation (defaults to the component's start_date field or 90 days ago, whichever is more recent).
        /// <br/>The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.
        /// <br/>If the year and month are given, the start date defaults to the first day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <param name="end">The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.
        /// <br/>If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <returns>Get uptime data for a component that has uptime showcase enabled</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ComponentUptime> GetPagesPageIdComponentsComponentIdUptimeAsync(
            string page_id, string component_id, bool? skip_related_events, object start, object end) {
            return GetPagesPageIdComponentsComponentIdUptimeAsync(page_id, component_id, skip_related_events, start,
                end, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get uptime data for a component
        /// </summary>
        /// <remarks>
        /// Get uptime data for a component that has uptime showcase enabled
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <param name="skip_related_events">Skips supplying the related events data along with the component uptime data.</param>
        /// <param name="start">The start date for uptime calculation (defaults to the component's start_date field or 90 days ago, whichever is more recent).
        /// <br/>The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.
        /// <br/>If the year and month are given, the start date defaults to the first day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <param name="end">The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.
        /// <br/>If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <returns>Get uptime data for a component that has uptime showcase enabled</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ComponentUptime>
            GetPagesPageIdComponentsComponentIdUptimeAsync(string page_id, string component_id,
                bool? skip_related_events,
                object start, object end, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}/uptime?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));
            if (skip_related_events != null) {
                urlBuilder_.Append(Uri.EscapeDataString("skip_related_events") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(skip_related_events,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (start != null) {
                urlBuilder_.Append(Uri.EscapeDataString("start") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(start,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (end != null) {
                urlBuilder_.Append(Uri.EscapeDataString("end") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(end,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ComponentUptime>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove page access users from component
        /// </summary>
        /// <remarks>
        /// Remove page access users from component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove page access users from component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component>
            DeletePagesPageIdComponentsComponentIdPageAccessUsersAsync(string page_id, string component_id) {
            return DeletePagesPageIdComponentsComponentIdPageAccessUsersAsync(page_id, component_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove page access users from component
        /// </summary>
        /// <remarks>
        /// Remove page access users from component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove page access users from component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component>
            DeletePagesPageIdComponentsComponentIdPageAccessUsersAsync(string page_id, string component_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}/page_access_users");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add page access users to a component
        /// </summary>
        /// <remarks>
        /// Add page access users to a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Add page access users to a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> PostPagesPageIdComponentsComponentIdPageAccessUsersAsync(
            string page_id, string component_id, Body body) {
            return PostPagesPageIdComponentsComponentIdPageAccessUsersAsync(page_id, component_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add page access users to a component
        /// </summary>
        /// <remarks>
        /// Add page access users to a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Add page access users to a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component>
            PostPagesPageIdComponentsComponentIdPageAccessUsersAsync(string page_id, string component_id, Body body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}/page_access_users");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var dictionary_ =
                        JsonConvert
                            .DeserializeObject<Dictionary<string, string>>(json_,
                                settings.Value);
                    var content_ = new FormUrlEncodedContent(dictionary_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/x-www-form-urlencoded");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Remove page access groups from a component
        /// </summary>
        /// <remarks>
        /// Remove page access groups from a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove page access groups from a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component>
            DeletePagesPageIdComponentsComponentIdPageAccessGroupsAsync(string page_id, string component_id) {
            return DeletePagesPageIdComponentsComponentIdPageAccessGroupsAsync(page_id, component_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Remove page access groups from a component
        /// </summary>
        /// <remarks>
        /// Remove page access groups from a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Remove page access groups from a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component>
            DeletePagesPageIdComponentsComponentIdPageAccessGroupsAsync(string page_id, string component_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}/page_access_groups");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add page access groups to a component
        /// </summary>
        /// <remarks>
        /// Add page access groups to a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Add page access groups to a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Component> PostPagesPageIdComponentsComponentIdPageAccessGroupsAsync(
            string page_id, string component_id) {
            return PostPagesPageIdComponentsComponentIdPageAccessGroupsAsync(page_id, component_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add page access groups to a component
        /// </summary>
        /// <remarks>
        /// Add page access groups to a component
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="component_id">Component identifier</param>
        /// <returns>Add page access groups to a component</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Component>
            PostPagesPageIdComponentsComponentIdPageAccessGroupsAsync(string page_id, string component_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (component_id == null)
                throw new ArgumentNullException("component_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/components/{component_id}/page_access_groups");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{component_id}",
                Uri.EscapeDataString(ConvertToString(component_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Content =
                        new StringContent(string.Empty, Encoding.UTF8, "application/json");
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Component>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a component group
        /// </summary>
        /// <remarks>
        /// Create a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<GroupComponent> PostPagesPageIdComponentGroupsAsync(string page_id,
            PostPagesPageIdComponentGroups body) {
            return PostPagesPageIdComponentGroupsAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a component group
        /// </summary>
        /// <remarks>
        /// Create a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GroupComponent> PostPagesPageIdComponentGroupsAsync(
            string page_id, PostPagesPageIdComponentGroups body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/component-groups");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<GroupComponent>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of component groups
        /// </summary>
        /// <remarks>
        /// Get a list of component groups
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of component groups</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<GroupComponent>>
            GetPagesPageIdComponentGroupsAsync(string page_id, int? page, int? per_page) {
            return GetPagesPageIdComponentGroupsAsync(page_id, page, per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of component groups
        /// </summary>
        /// <remarks>
        /// Get a list of component groups
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of component groups</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<GroupComponent>>
            GetPagesPageIdComponentGroupsAsync(string page_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<GroupComponent>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a component group
        /// </summary>
        /// <remarks>
        /// Update a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Update a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<GroupComponent> PatchPagesPageIdComponentGroupsIdAsync(
            string page_id, string id, PatchPagesPageIdComponentGroups body) {
            return PatchPagesPageIdComponentGroupsIdAsync(page_id, id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a component group
        /// </summary>
        /// <remarks>
        /// Update a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Update a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GroupComponent> PatchPagesPageIdComponentGroupsIdAsync(
            string page_id, string id, PatchPagesPageIdComponentGroups body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (id == null)
                throw new ArgumentNullException("id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups/{id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}",
                Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<GroupComponent>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a component group
        /// </summary>
        /// <remarks>
        /// Update a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Update a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<GroupComponent> PutPagesPageIdComponentGroupsIdAsync(string page_id,
            string id, PutPagesPageIdComponentGroups body) {
            return PutPagesPageIdComponentGroupsIdAsync(page_id, id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a component group
        /// </summary>
        /// <remarks>
        /// Update a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Update a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GroupComponent> PutPagesPageIdComponentGroupsIdAsync(
            string page_id, string id, PutPagesPageIdComponentGroups body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (id == null)
                throw new ArgumentNullException("id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups/{id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}",
                Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<GroupComponent>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a component group
        /// </summary>
        /// <remarks>
        /// Delete a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Delete a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<GroupComponent> DeletePagesPageIdComponentGroupsIdAsync(
            string page_id, string id) {
            return DeletePagesPageIdComponentGroupsIdAsync(page_id, id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a component group
        /// </summary>
        /// <remarks>
        /// Delete a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Delete a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GroupComponent> DeletePagesPageIdComponentGroupsIdAsync(
            string page_id, string id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (id == null)
                throw new ArgumentNullException("id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups/{id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}",
                Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<GroupComponent>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a component group
        /// </summary>
        /// <remarks>
        /// Get a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Get a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<GroupComponent> GetPagesPageIdComponentGroupsIdAsync(string page_id,
            string id) {
            return GetPagesPageIdComponentGroupsIdAsync(page_id, id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a component group
        /// </summary>
        /// <remarks>
        /// Get a component group
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <returns>Get a component group</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<GroupComponent> GetPagesPageIdComponentGroupsIdAsync(
            string page_id, string id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (id == null)
                throw new ArgumentNullException("id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups/{id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}",
                Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<GroupComponent>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get uptime data for a component group
        /// </summary>
        /// <remarks>
        /// Get uptime data for a component group that has uptime showcase enabled for at least one component.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <param name="skip_related_events">Skips supplying the related events data along with the component uptime data.</param>
        /// <param name="start">The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent).
        /// <br/>The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.
        /// <br/>If the year and month are given, the start date defaults to the first day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <param name="end">The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.
        /// <br/>If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <returns>Get uptime data for a component group that has uptime showcase enabled for at least one component.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ComponentGroupUptime> GetPagesPageIdComponentGroupsIdUptimeAsync(
            string page_id, string id, bool? skip_related_events, object start, object end) {
            return GetPagesPageIdComponentGroupsIdUptimeAsync(page_id, id, skip_related_events, start, end,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get uptime data for a component group
        /// </summary>
        /// <remarks>
        /// Get uptime data for a component group that has uptime showcase enabled for at least one component.
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="id">Component group identifier</param>
        /// <param name="skip_related_events">Skips supplying the related events data along with the component uptime data.</param>
        /// <param name="start">The start date for uptime calculation (defaults to the date of the component in the group with the earliest start_date, or 90 days ago, whichever is more recent).
        /// <br/>The maximum supported date range is six calendar months. If the year is given, the date defaults to the first day of the year.
        /// <br/>If the year and month are given, the start date defaults to the first day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <param name="end">The end date for uptime calculation (defaults to today in the page's time zone). The maximum supported date range is six calendar months.
        /// <br/>If the year is given, the date defaults to the last day of the year. If the year and month are given, the date defaults to the last day of that month.
        /// <br/>The earliest supported date is January 1, 1970.</param>
        /// <returns>Get uptime data for a component group that has uptime showcase enabled for at least one component.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ComponentGroupUptime>
            GetPagesPageIdComponentGroupsIdUptimeAsync(string page_id, string id, bool? skip_related_events,
                object start,
                object end, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (id == null)
                throw new ArgumentNullException("id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/component-groups/{id}/uptime?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{id}",
                Uri.EscapeDataString(ConvertToString(id, CultureInfo.InvariantCulture)));
            if (skip_related_events != null) {
                urlBuilder_.Append(Uri.EscapeDataString("skip_related_events") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(skip_related_events,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (start != null) {
                urlBuilder_.Append(Uri.EscapeDataString("start") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(start,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (end != null) {
                urlBuilder_.Append(Uri.EscapeDataString("end") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(end,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ComponentGroupUptime>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add data points to metrics
        /// </summary>
        /// <remarks>
        /// Add data points to metrics
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Data Point is submitted and is currently being added to the metrics</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricAddResponse> PostPagesPageIdMetricsDataAsync(string page_id,
            PostPagesPageIdMetricsData body) {
            return PostPagesPageIdMetricsDataAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add data points to metrics
        /// </summary>
        /// <remarks>
        /// Add data points to metrics
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Data Point is submitted and is currently being added to the metrics</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricAddResponse> PostPagesPageIdMetricsDataAsync(
            string page_id, PostPagesPageIdMetricsData body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/metrics/data");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 202) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricAddResponse>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 405) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Method not allowed.", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of metrics
        /// </summary>
        /// <remarks>
        /// Get a list of metrics
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of metrics</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> GetPagesPageIdMetricsAsync(string page_id, int? page,
            int? per_page) {
            return GetPagesPageIdMetricsAsync(page_id, page, per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of metrics
        /// </summary>
        /// <remarks>
        /// Get a list of metrics
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of metrics</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> GetPagesPageIdMetricsAsync(string page_id, int? page,
            int? per_page, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "").Append("/pages/{page_id}/metrics?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a metric
        /// </summary>
        /// <remarks>
        /// Update a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Update a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> PatchPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, PatchPagesPageIdMetrics body) {
            return PatchPagesPageIdMetricsMetricIdAsync(page_id, metric_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a metric
        /// </summary>
        /// <remarks>
        /// Update a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Update a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> PatchPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, PatchPagesPageIdMetrics body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a metric
        /// </summary>
        /// <remarks>
        /// Update a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Update a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> PutPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, PutPagesPageIdMetrics body) {
            return PutPagesPageIdMetricsMetricIdAsync(page_id, metric_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a metric
        /// </summary>
        /// <remarks>
        /// Update a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Update a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> PutPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, PutPagesPageIdMetrics body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a metric
        /// </summary>
        /// <remarks>
        /// Delete a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Delete a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> DeletePagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id) {
            return DeletePagesPageIdMetricsMetricIdAsync(page_id, metric_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a metric
        /// </summary>
        /// <remarks>
        /// Delete a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Delete a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> DeletePagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a metric
        /// </summary>
        /// <remarks>
        /// Get a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Get a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> GetPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id) {
            return GetPagesPageIdMetricsMetricIdAsync(page_id, metric_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a metric
        /// </summary>
        /// <remarks>
        /// Get a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Get a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> GetPagesPageIdMetricsMetricIdAsync(string page_id,
            string metric_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Reset data for a metric
        /// </summary>
        /// <remarks>
        /// Reset data for a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Reset data for a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> DeletePagesPageIdMetricsMetricIdDataAsync(string page_id,
            string metric_id) {
            return DeletePagesPageIdMetricsMetricIdDataAsync(page_id, metric_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Reset data for a metric
        /// </summary>
        /// <remarks>
        /// Reset data for a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Reset data for a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric> DeletePagesPageIdMetricsMetricIdDataAsync(
            string page_id, string metric_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}/data");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Add data to a metric
        /// </summary>
        /// <remarks>
        /// Add data to a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Add data to a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<SingleMetricAddResponse> PostPagesPageIdMetricsMetricIdDataAsync(
            string page_id, string metric_id, PostPagesPageIdMetricsMetricIdData body) {
            return PostPagesPageIdMetricsMetricIdDataAsync(page_id, metric_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Add data to a metric
        /// </summary>
        /// <remarks>
        /// Add data to a metric
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metric_id">Metric Identifier</param>
        /// <returns>Add data to a metric</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<SingleMetricAddResponse>
            PostPagesPageIdMetricsMetricIdDataAsync(string page_id, string metric_id,
                PostPagesPageIdMetricsMetricIdData body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metric_id == null)
                throw new ArgumentNullException("metric_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics/{metric_id}/data");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metric_id}",
                Uri.EscapeDataString(ConvertToString(metric_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<SingleMetricAddResponse>(response_, headers_,
                                    cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 405) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Method not allowed.", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of metric providers
        /// </summary>
        /// <remarks>
        /// Get a list of metric providers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a list of metric providers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<MetricsProvider>>
            GetPagesPageIdMetricsProvidersAsync(string page_id) {
            return GetPagesPageIdMetricsProvidersAsync(page_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of metric providers
        /// </summary>
        /// <remarks>
        /// Get a list of metric providers
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get a list of metric providers</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<MetricsProvider>>
            GetPagesPageIdMetricsProvidersAsync(string page_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<MetricsProvider>>(
                                    response_, headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a metric provider
        /// </summary>
        /// <remarks>
        /// Create a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricsProvider> PostPagesPageIdMetricsProvidersAsync(string page_id,
            PostPagesPageIdMetricsProviders body) {
            return PostPagesPageIdMetricsProvidersAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a metric provider
        /// </summary>
        /// <remarks>
        /// Create a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Create a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricsProvider> PostPagesPageIdMetricsProvidersAsync(
            string page_id, PostPagesPageIdMetricsProviders body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricsProvider>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a metric provider
        /// </summary>
        /// <remarks>
        /// Get a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Get a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricsProvider>
            GetPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id) {
            return GetPagesPageIdMetricsProvidersMetricsProviderIdAsync(page_id, metrics_provider_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a metric provider
        /// </summary>
        /// <remarks>
        /// Get a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Get a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricsProvider>
            GetPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricsProvider>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a metric provider
        /// </summary>
        /// <remarks>
        /// Update a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Update a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricsProvider>
            PatchPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                PatchPagesPageIdMetricsProviders body) {
            return PatchPagesPageIdMetricsProvidersMetricsProviderIdAsync(page_id, metrics_provider_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a metric provider
        /// </summary>
        /// <remarks>
        /// Update a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Update a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricsProvider>
            PatchPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                PatchPagesPageIdMetricsProviders body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricsProvider>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a metric provider
        /// </summary>
        /// <remarks>
        /// Update a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Update a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricsProvider>
            PutPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                PutPagesPageIdMetricsProviders body) {
            return PutPagesPageIdMetricsProvidersMetricsProviderIdAsync(page_id, metrics_provider_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a metric provider
        /// </summary>
        /// <remarks>
        /// Update a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Update a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricsProvider>
            PutPagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                PutPagesPageIdMetricsProviders body, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricsProvider>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a metric provider
        /// </summary>
        /// <remarks>
        /// Delete a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Delete a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<MetricsProvider>
            DeletePagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id) {
            return DeletePagesPageIdMetricsProvidersMetricsProviderIdAsync(page_id, metrics_provider_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a metric provider
        /// </summary>
        /// <remarks>
        /// Delete a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Delete a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<MetricsProvider>
            DeletePagesPageIdMetricsProvidersMetricsProviderIdAsync(string page_id, string metrics_provider_id,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<MetricsProvider>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// List metrics for a metric provider
        /// </summary>
        /// <remarks>
        /// List metrics for a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>List metrics for a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> GetPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(
            string page_id, string metrics_provider_id, int? page, int? per_page) {
            return GetPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(page_id, metrics_provider_id, page,
                per_page, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// List metrics for a metric provider
        /// </summary>
        /// <remarks>
        /// List metrics for a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>List metrics for a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric>
            GetPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(string page_id, string metrics_provider_id,
                int? page, int? per_page, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics?");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a metric for a metric provider
        /// </summary>
        /// <remarks>
        /// Create a metric for a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Create a metric for a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Metric> PostPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(
            string page_id, string metrics_provider_id, PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics body) {
            return PostPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(page_id, metrics_provider_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a metric for a metric provider
        /// </summary>
        /// <remarks>
        /// Create a metric for a metric provider
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <param name="metrics_provider_id">Metric Provider Identifier</param>
        /// <returns>Create a metric for a metric provider</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Metric>
            PostPagesPageIdMetricsProvidersMetricsProviderIdMetricsAsync(string page_id, string metrics_provider_id,
                PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics body,
                CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (metrics_provider_id == null)
                throw new ArgumentNullException("metrics_provider_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/metrics_providers/{metrics_provider_id}/metrics");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{metrics_provider_id}",
                Uri.EscapeDataString(ConvertToString(metrics_provider_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Metric>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get status embed config settings
        /// </summary>
        /// <remarks>
        /// Get status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<StatusEmbedConfig> GetPagesPageIdStatusEmbedConfigAsync(
            string page_id) {
            return GetPagesPageIdStatusEmbedConfigAsync(page_id, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get status embed config settings
        /// </summary>
        /// <remarks>
        /// Get status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Get status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<StatusEmbedConfig> GetPagesPageIdStatusEmbedConfigAsync(
            string page_id, CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/status_embed_config");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<StatusEmbedConfig>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update status embed config settings
        /// </summary>
        /// <remarks>
        /// Update status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<StatusEmbedConfig> PatchPagesPageIdStatusEmbedConfigAsync(
            string page_id, PatchPagesPageIdStatusEmbedConfig body) {
            return PatchPagesPageIdStatusEmbedConfigAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update status embed config settings
        /// </summary>
        /// <remarks>
        /// Update status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<StatusEmbedConfig> PatchPagesPageIdStatusEmbedConfigAsync(
            string page_id, PatchPagesPageIdStatusEmbedConfig body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/status_embed_config");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PATCH");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<StatusEmbedConfig>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update status embed config settings
        /// </summary>
        /// <remarks>
        /// Update status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<StatusEmbedConfig> PutPagesPageIdStatusEmbedConfigAsync(
            string page_id, PutPagesPageIdStatusEmbedConfig body) {
            return PutPagesPageIdStatusEmbedConfigAsync(page_id, body, CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update status embed config settings
        /// </summary>
        /// <remarks>
        /// Update status embed config settings
        /// </remarks>
        /// <param name="page_id">Page identifier</param>
        /// <returns>Update status embed config settings</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<StatusEmbedConfig> PutPagesPageIdStatusEmbedConfigAsync(
            string page_id, PutPagesPageIdStatusEmbedConfig body,
            CancellationToken cancellationToken) {
            if (page_id == null)
                throw new ArgumentNullException("page_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/pages/{page_id}/status_embed_config");
            urlBuilder_.Replace("{page_id}",
                Uri.EscapeDataString(ConvertToString(page_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<StatusEmbedConfig>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Update a user's role permissions
        /// </summary>
        /// <remarks>
        /// Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,
        /// <br/>                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.
        /// <br/>                  User will lose access to any pages omitted from the payload.
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User identifier</param>
        /// <returns>Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,
        /// <br/>                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.
        /// <br/>                  User will lose access to any pages omitted from the payload.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Permissions> PutOrganizationsOrganizationIdPermissionsUserIdAsync(
            string organization_id, string user_id, PutOrganizationsOrganizationIdPermissions body) {
            return PutOrganizationsOrganizationIdPermissionsUserIdAsync(organization_id, user_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Update a user's role permissions
        /// </summary>
        /// <remarks>
        /// Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,
        /// <br/>                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.
        /// <br/>                  User will lose access to any pages omitted from the payload.
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User identifier</param>
        /// <returns>Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,
        /// <br/>                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.
        /// <br/>                  User will lose access to any pages omitted from the payload.</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Permissions>
            PutOrganizationsOrganizationIdPermissionsUserIdAsync(string organization_id, string user_id,
                PutOrganizationsOrganizationIdPermissions body, CancellationToken cancellationToken) {
            if (organization_id == null)
                throw new ArgumentNullException("organization_id");

            if (user_id == null)
                throw new ArgumentNullException("user_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/organizations/{organization_id}/permissions/{user_id}");
            urlBuilder_.Replace("{organization_id}",
                Uri.EscapeDataString(ConvertToString(organization_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}",
                Uri.EscapeDataString(ConvertToString(user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("PUT");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Permissions>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 400) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Bad request", status_, objectResponse_.Text, headers_,
                                objectResponse_.Object, null);
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a user's permissions
        /// </summary>
        /// <remarks>
        /// Get a user's permissions
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User identifier</param>
        /// <returns>Get a user's permissions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<Permissions> GetOrganizationsOrganizationIdPermissionsUserIdAsync(
            string organization_id, string user_id) {
            return GetOrganizationsOrganizationIdPermissionsUserIdAsync(organization_id, user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a user's permissions
        /// </summary>
        /// <remarks>
        /// Get a user's permissions
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User identifier</param>
        /// <returns>Get a user's permissions</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<Permissions>
            GetOrganizationsOrganizationIdPermissionsUserIdAsync(string organization_id, string user_id,
                CancellationToken cancellationToken) {
            if (organization_id == null)
                throw new ArgumentNullException("organization_id");

            if (user_id == null)
                throw new ArgumentNullException("user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/organizations/{organization_id}/permissions/{user_id}");
            urlBuilder_.Replace("{organization_id}",
                Uri.EscapeDataString(ConvertToString(organization_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}",
                Uri.EscapeDataString(ConvertToString(user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<Permissions>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User Identifier</param>
        /// <returns>Delete a user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<User> DeleteOrganizationsOrganizationIdUsersUserIdAsync(
            string organization_id, string user_id) {
            return DeleteOrganizationsOrganizationIdUsersUserIdAsync(organization_id, user_id,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Delete a user
        /// </summary>
        /// <remarks>
        /// Delete a user
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="user_id">User Identifier</param>
        /// <returns>Delete a user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<User> DeleteOrganizationsOrganizationIdUsersUserIdAsync(
            string organization_id, string user_id, CancellationToken cancellationToken) {
            if (organization_id == null)
                throw new ArgumentNullException("organization_id");

            if (user_id == null)
                throw new ArgumentNullException("user_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/organizations/{organization_id}/users/{user_id}");
            urlBuilder_.Replace("{organization_id}",
                Uri.EscapeDataString(ConvertToString(organization_id,
                    CultureInfo.InvariantCulture)));
            urlBuilder_.Replace("{user_id}",
                Uri.EscapeDataString(ConvertToString(user_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("DELETE");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 403) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("You are not authorized to access this resource.",
                                status_, objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a user
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <returns>Create a user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<User> PostOrganizationsOrganizationIdUsersAsync(
            string organization_id, PostOrganizationsOrganizationIdUsers body) {
            return PostOrganizationsOrganizationIdUsersAsync(organization_id, body,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Create a user
        /// </summary>
        /// <remarks>
        /// Create a user
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <returns>Create a user</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<User> PostOrganizationsOrganizationIdUsersAsync(
            string organization_id, PostOrganizationsOrganizationIdUsers body,
            CancellationToken cancellationToken) {
            if (organization_id == null)
                throw new ArgumentNullException("organization_id");

            if (body == null)
                throw new ArgumentNullException("body");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/organizations/{organization_id}/users");
            urlBuilder_.Replace("{organization_id}",
                Uri.EscapeDataString(ConvertToString(organization_id,
                    CultureInfo.InvariantCulture)));

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    var json_ = JsonConvert.SerializeObject(body, settings.Value);
                    var content_ = new StringContent(json_);
                    content_.Headers.ContentType =
                        MediaTypeHeaderValue.Parse("application/json");
                    request_.Content = content_;
                    request_.Method = new HttpMethod("POST");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 201) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<User>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 422) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Unprocessable entity", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual Task<ICollection<User>>
            GetOrganizationsOrganizationIdUsersAsync(string organization_id, int? page, int? per_page) {
            return GetOrganizationsOrganizationIdUsersAsync(organization_id, page, per_page,
                CancellationToken.None);
        }

        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
        /// <summary>
        /// Get a list of users
        /// </summary>
        /// <remarks>
        /// Get a list of users
        /// </remarks>
        /// <param name="organization_id">Organization Identifier</param>
        /// <param name="page">Page offset to fetch. Beginning February 28, 2023, this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <param name="per_page">Number of results to return per page. Beginning February 28, 2023, a default and maximum limit of 100 will be imposed and this endpoint will return paginated data even if this query parameter is not provided.</param>
        /// <returns>Get a list of users</returns>
        /// <exception cref="ApiException">A server side error occurred.</exception>
        public virtual async Task<ICollection<User>>
            GetOrganizationsOrganizationIdUsersAsync(string organization_id, int? page, int? per_page,
                CancellationToken cancellationToken) {
            if (organization_id == null)
                throw new ArgumentNullException("organization_id");

            var urlBuilder_ = new StringBuilder();
            urlBuilder_.Append(BaseUrl != null ? BaseUrl.TrimEnd('/') : "")
                .Append("/organizations/{organization_id}/users?");
            urlBuilder_.Replace("{organization_id}",
                Uri.EscapeDataString(ConvertToString(organization_id,
                    CultureInfo.InvariantCulture)));
            if (page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            if (per_page != null) {
                urlBuilder_.Append(Uri.EscapeDataString("per_page") + "=")
                    .Append(Uri.EscapeDataString(ConvertToString(per_page,
                        CultureInfo.InvariantCulture))).Append("&");
            }

            urlBuilder_.Length--;

            var client_ = httpClient;
            var disposeClient_ = false;
            try {
                using (var request_ = new HttpRequestMessage()) {
                    request_.Method = new HttpMethod("GET");
                    request_.Headers.Accept.Add(
                        MediaTypeWithQualityHeaderValue.Parse("application/json"));

                    PrepareRequest(client_, request_, urlBuilder_);

                    var url_ = urlBuilder_.ToString();
                    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);

                    PrepareRequest(client_, request_, url_);

                    var response_ = await client_.SendAsync(request_,
                            HttpCompletionOption.ResponseHeadersRead, cancellationToken)
                        .ConfigureAwait(false);
                    var disposeResponse_ = true;
                    try {
                        var headers_ =
                            Enumerable.ToDictionary(response_.Headers, h_ => h_.Key, h_ => h_.Value);
                        if (response_.Content != null && response_.Content.Headers != null) {
                            foreach (var item_ in response_.Content.Headers)
                                headers_[item_.Key] = item_.Value;
                        }

                        ProcessResponse(client_, response_);

                        var status_ = (int)response_.StatusCode;
                        if (status_ == 200) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ICollection<User>>(response_,
                                    headers_, cancellationToken).ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            return objectResponse_.Object;
                        }
                        else if (status_ == 401) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("Could not authenticate", status_, objectResponse_.Text,
                                headers_, objectResponse_.Object, null);
                        }
                        else if (status_ == 404) {
                            var objectResponse_ =
                                await ReadObjectResponseAsync<ErrorEntity>(response_, headers_, cancellationToken)
                                    .ConfigureAwait(false);
                            if (objectResponse_.Object == null) {
                                throw new ApiException("Response was null which was not expected.", status_,
                                    objectResponse_.Text, headers_, null);
                            }

                            throw new ApiException<ErrorEntity>("The requested resource could not be found.", status_,
                                objectResponse_.Text, headers_, objectResponse_.Object, null);
                        }
                        else {
                            var responseData_ = response_.Content == null
                                ? null
                                : await response_.Content.ReadAsStringAsync().ConfigureAwait(false);
                            throw new ApiException(
                                "The HTTP status code of the response was not expected (" + status_ + ").", status_,
                                responseData_, headers_, null);
                        }
                    }
                    finally {
                        if (disposeResponse_)
                            response_.Dispose();
                    }
                }
            }
            finally {
                if (disposeClient_)
                    client_.Dispose();
            }
        }

        protected virtual async Task<ObjectResponseResult<T>> ReadObjectResponseAsync<T>(
            HttpResponseMessage response,
            IReadOnlyDictionary<string, IEnumerable<string>>
                headers, CancellationToken cancellationToken) {
            if (response == null || response.Content == null) {
                return new ObjectResponseResult<T>(default(T), string.Empty);
            }

            if (ReadResponseAsString) {
                var responseText = await response.Content.ReadAsStringAsync().ConfigureAwait(false);
                try {
                    var typedBody =
                        JsonConvert.DeserializeObject<T>(responseText, JsonSerializerSettings);
                    return new ObjectResponseResult<T>(typedBody, responseText);
                }
                catch (JsonException exception) {
                    var message = "Could not deserialize the response body string as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, responseText, headers, exception);
                }
            }
            else {
                try {
                    using (var responseStream = await response.Content.ReadAsStreamAsync().ConfigureAwait(false))
                    using (var streamReader = new System.IO.StreamReader(responseStream))
                    using (var jsonTextReader = new JsonTextReader(streamReader)) {
                        var serializer = JsonSerializer.Create(JsonSerializerSettings);
                        var typedBody = serializer.Deserialize<T>(jsonTextReader);
                        return new ObjectResponseResult<T>(typedBody, string.Empty);
                    }
                }
                catch (JsonException exception) {
                    var message = "Could not deserialize the response body stream as " + typeof(T).FullName + ".";
                    throw new ApiException(message, (int)response.StatusCode, string.Empty, headers, exception);
                }
            }
        }

        private string ConvertToString(object value, System.Globalization.CultureInfo cultureInfo) {
            if (value == null) {
                return "";
            }

            if (value is Enum) {
                var name = Enum.GetName(value.GetType(), value);
                if (name != null) {
                    var field = System.Reflection.IntrospectionExtensions.GetTypeInfo(value.GetType())
                        .GetDeclaredField(name);
                    if (field != null) {
                        var attribute = System.Reflection.CustomAttributeExtensions.GetCustomAttribute(field,
                                typeof(System.Runtime.Serialization.EnumMemberAttribute))
                            as System.Runtime.Serialization.EnumMemberAttribute;
                        if (attribute != null) {
                            return attribute.Value != null ? attribute.Value : name;
                        }
                    }

                    var converted = Convert.ToString(Convert.ChangeType(value,
                        Enum.GetUnderlyingType(value.GetType()), cultureInfo));
                    return converted == null ? string.Empty : converted;
                }
            }
            else if (value is bool) {
                return Convert.ToString((bool)value, cultureInfo).ToLowerInvariant();
            }
            else if (value is byte[]) {
                return Convert.ToBase64String((byte[])value);
            }
            else if (value.GetType().IsArray) {
                var array = Enumerable.OfType<object>((Array)value);
                return string.Join(",", Enumerable.Select(array, o => ConvertToString(o, cultureInfo)));
            }

            var result = Convert.ToString(value, cultureInfo);
            return result == null ? "" : result;
        }

        protected struct ObjectResponseResult<T> {
            public ObjectResponseResult(T responseObject, string responseText) {
                this.Object = responseObject;
                this.Text = responseText;
            }

            public T Object { get; }

            public string Text { get; }
        }
    }

    /// <summary>
    /// Get a page
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Page identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Timestamp the record was created
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// Timestamp the record was last updated
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Name of your page to be displayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("page_description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_description { get; set; }

        [Newtonsoft.Json.JsonProperty("headline", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Headline { get; set; }

        /// <summary>
        /// The main template your statuspage will use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branding", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Branding { get; set; }

        /// <summary>
        /// Subdomain at which to access your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subdomain { get; set; }

        /// <summary>
        /// CNAME alias for your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>
        /// Website of your page.  Clicking on your statuspage image will link here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        [Newtonsoft.Json.JsonProperty("support_url", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Support_url { get; set; }

        /// <summary>
        /// Should your page hide itself from search engines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hidden_from_search", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hidden_from_search { get; set; }

        /// <summary>
        /// Can your users subscribe to all notifications on the page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_page_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_page_subscribers { get; set; }

        /// <summary>
        /// Can your users subscribe to notifications for a single incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_incident_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_incident_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_email_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_email_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via SMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_sms_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_sms_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_rss_atom_feeds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_rss_atom_feeds { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via Webhooks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_webhook_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_webhook_subscribers { get; set; }

        /// <summary>
        /// Allows you to customize the email address your page notifications come from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_from_email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_from_email { get; set; }

        /// <summary>
        /// Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_email_footer", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_email_footer { get; set; }

        [Newtonsoft.Json.JsonProperty("activity_score", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Activity_score { get; set; }

        [Newtonsoft.Json.JsonProperty("twitter_username", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Twitter_username { get; set; }

        [Newtonsoft.Json.JsonProperty("viewers_must_be_team_members", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Viewers_must_be_team_members { get; set; }

        [Newtonsoft.Json.JsonProperty("ip_restrictions", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Ip_restrictions { get; set; }

        [Newtonsoft.Json.JsonProperty("city", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string City { get; set; }

        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string State { get; set; }

        [Newtonsoft.Json.JsonProperty("country", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Country { get; set; }

        /// <summary>
        /// Timezone configured for your page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time_zone", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time_zone { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_body_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_body_background_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_light_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_light_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_greens", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_greens { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_yellows", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_yellows { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_oranges", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_oranges { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_blues", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_blues { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_reds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_reds { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_border_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_border_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_graph_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_graph_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_link_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_link_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_no_data", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_no_data { get; set; }

        [Newtonsoft.Json.JsonProperty("favicon_logo", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Favicon_logo { get; set; }

        [Newtonsoft.Json.JsonProperty("transactional_logo", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transactional_logo { get; set; }

        [Newtonsoft.Json.JsonProperty("hero_cover", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Hero_cover { get; set; }

        [Newtonsoft.Json.JsonProperty("email_logo", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email_logo { get; set; }

        [Newtonsoft.Json.JsonProperty("twitter_logo", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Twitter_logo { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a list of users
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ErrorEntity {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("message", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Message { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a page
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPages {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page2 Page { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a page
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPages {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page3 Page { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add a page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdPageAccessUsers {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page_access_user", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page_access_user Page_access_user { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Delete metric for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageAccessUser {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Page Access User Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// IDP login user id. Key is typically "uid".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_login", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_login { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_access_group_id { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_group_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_access_group_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add components for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdPageAccessUsersPageAccessUserIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of component codes to allow access to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add components for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdPageAccessUsersPageAccessUserIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of component codes to allow access to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Replace components for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdPageAccessUsersPageAccessUserIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of component codes to allow access to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Remove components for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DeletePagesPageIdPageAccessUsersPageAccessUserIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of components codes to remove.  If omitted, all components will be removed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add page access groups to a component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Identifier for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Page identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        /// <summary>
        /// Component Group identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Is this component a group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Group { get; set; }

        /// <summary>
        /// Display name for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// More detailed description for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Order the component will appear on the page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Position { get; set; }

        /// <summary>
        /// Status of component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public ComponentStatus Status { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showcase", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Showcase { get; set; }

        /// <summary>
        /// Requires a special feature flag to be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("only_show_if_degraded", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Only_show_if_degraded { get; set; }

        /// <summary>
        /// Requires a special feature flag to be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("automation_email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Automation_email { get; set; }

        /// <summary>
        /// The date this component started being used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Start_date { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add metrics for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdPageAccessUsersPageAccessUserIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of metrics to add
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add metrics for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdPageAccessUsersPageAccessUserIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of metrics to add
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Replace metrics for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdPageAccessUsersPageAccessUserIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of metrics to add
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Delete metrics for page access user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DeletePagesPageIdPageAccessUsersPageAccessUserIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of metrics to remove
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a metric for a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metric {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Metric identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Metric Provider identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metrics_provider_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metrics_provider_id { get; set; }

        /// <summary>
        /// Metric Display identifier used to look up the metric data from the provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_identifier { get; set; }

        /// <summary>
        /// Name of metric
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Should the metric be displayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Display { get; set; }

        [Newtonsoft.Json.JsonProperty("tooltip_description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tooltip_description { get; set; }

        [Newtonsoft.Json.JsonProperty("backfilled", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Backfilled { get; set; }

        [Newtonsoft.Json.JsonProperty("y_axis_min", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Y_axis_min { get; set; }

        [Newtonsoft.Json.JsonProperty("y_axis_max", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Y_axis_max { get; set; }

        /// <summary>
        /// Should the values on the y axis be hidden on render
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y_axis_hidden", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Y_axis_hidden { get; set; }

        /// <summary>
        /// Suffix to describe the units on the graph
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        [Newtonsoft.Json.JsonProperty("decimal_places", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimal_places { get; set; }

        [Newtonsoft.Json.JsonProperty("most_recent_data_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Most_recent_data_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("last_fetched_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_fetched_at { get; set; }

        [Newtonsoft.Json.JsonProperty("backfill_percentage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Backfill_percentage { get; set; }

        [Newtonsoft.Json.JsonProperty("reference_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reference_name { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Remove a component from a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PageAccessGroup {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Page Access Group Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Page Identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        /// <summary>
        /// Name for this Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_user_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Page_access_user_ids { get; set; }

        /// <summary>
        /// Associates group with external group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdPageAccessGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page_access_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page_access_group Page_access_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdPageAccessGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page_access_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page_access_group2 Page_access_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdPageAccessGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page_access_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page_access_group3 Page_access_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add components to page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdPageAccessGroupsPageAccessGroupIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of Component identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add components to page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdPageAccessGroupsPageAccessGroupIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of Component identifiers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Replace components for a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdPageAccessGroupsPageAccessGroupIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of components codes to set on the page access group
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Delete components for a page access group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class DeletePagesPageIdPageAccessGroupsPageAccessGroupIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Resend confirmations to a list of subscribers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdSubscribersResendConfirmation {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The array of subscriber codes to resend confirmations for, or "all" to resend confirmations to all subscribers. Only unconfirmed email subscribers will receive this notification.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscribers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subscribers { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Unsubscribe a list of subscribers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdSubscribersUnsubscribe {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The array of subscriber codes to unsubscribe (limited to 100), or "all" to unsubscribe all subscribers if the number of subscribers is less than 100.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscribers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subscribers { get; set; }

        /// <summary>
        /// If this is present, only unsubscribe subscribers of this type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostPagesPageIdSubscribersUnsubscribeType Type { get; set; }

        /// <summary>
        /// If this is present, only unsubscribe subscribers in this state. Specify state "all" to unsubscribe subscribers in any states.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("state", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostPagesPageIdSubscribersUnsubscribeState State { get; set; } =
            SergiyE.StatusPageIoApi.PostPagesPageIdSubscribersUnsubscribeState.Active;

        /// <summary>
        /// If skip_unsubscription_notification is true, the subscribers do not receive any notifications when they are unsubscribed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_unsubscription_notification",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_unsubscription_notification { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Reactivate a list of quarantined subscribers
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdSubscribersReactivate {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The array of quarantined subscriber codes to reactivate, or "all" to reactivate all quarantined subscribers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subscribers", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Subscribers { get; set; }

        /// <summary>
        /// If this is present, only reactivate subscribers of this type.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public PostPagesPageIdSubscribersReactivateType Type { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a histogram of subscribers by type and then state
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubscriberCountByTypeAndState {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Email { get; set; }

        [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Sms { get; set; }

        [Newtonsoft.Json.JsonProperty("webhook", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Webhook { get; set; }

        [Newtonsoft.Json.JsonProperty("integration_partner", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Integration_partner { get; set; }

        [Newtonsoft.Json.JsonProperty("slack", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Slack { get; set; }

        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public SubscriberCountByState Teams { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubscriberCountByState {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The number of active subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("active", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Active { get; set; }

        /// <summary>
        /// The number of unconfirmed subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("unconfirmed", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Unconfirmed { get; set; }

        /// <summary>
        /// The number of quarantined subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarantined", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Quarantined { get; set; }

        /// <summary>
        /// The total number of subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("total", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Total { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a count of subscribers by type
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SubscriberCountByType {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The number of Email subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Email { get; set; }

        /// <summary>
        /// The number of Webhook subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("sms", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Sms { get; set; }

        /// <summary>
        /// The number of SMS subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("webhook", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Webhook { get; set; }

        /// <summary>
        /// The number of integration partners found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("integration_partner", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Integration_partner { get; set; }

        /// <summary>
        /// The number of Slack subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("slack", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Slack { get; set; }

        /// <summary>
        /// The number of MS teams subscribers found by the query.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("teams", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Teams { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get an incident subscriber
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Subscriber {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Subscriber Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// If this is true, do not notify the user with changes to their subscription.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_confirmation_notification",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_confirmation_notification { get; set; }

        /// <summary>
        /// The communication mode of the subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("mode", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Mode { get; set; }

        /// <summary>
        /// The email address to use to contact the subscriber. Used for Email and Webhook subscribers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The URL where a webhook subscriber elects to receive updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The phone number used to contact an SMS subscriber
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_number { get; set; }

        /// <summary>
        /// The two-character country code representing the country of which the phone_number is a part.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_country", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_country { get; set; }

        /// <summary>
        /// A formatted version of the phone_number and phone_country pair, nicely formatted for display.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_phone_number", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Display_phone_number { get; set; }

        /// <summary>
        /// Obfuscated slack channel name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("obfuscated_channel_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Obfuscated_channel_name { get; set; }

        /// <summary>
        /// The workspace name of the slack subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("workspace_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Workspace_name { get; set; }

        /// <summary>
        /// The timestamp when the subscriber was quarantined due to an issue reaching them.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("quarantined_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Quarantined_at { get; set; }

        /// <summary>
        /// The timestamp when a quarantined subscriber will be purged (unsubscribed).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("purge_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Purge_at { get; set; }

        /// <summary>
        /// The components for which the subscriber has elected to receive updates.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Components { get; set; }

        /// <summary>
        /// The Page Access user this subscriber belongs to (only for audience-specific pages).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_access_user_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_access_user_id { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a subscriber. Not applicable for Slack subscribers.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdSubscribers {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("subscriber", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subscriber2 Subscriber { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a subscriber
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdSubscribers {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// A list of component ids for which the subscriber should recieve updates for. Components must be an array with at least one element if it is passed at all. Each component must belong to the page indicated in the path. To set the subscriber to be subscribed to all components on the page, exclude this parameter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a template
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdIncidentTemplates {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("template", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Template Template { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a list of templates
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IncidentTemplate {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Template Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Component> Components { get; set; }

        /// <summary>
        /// Name of the template, as shown in the list on the "Templates" tab of the "Incidents" page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Title to be applied to the incident or maintenance when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Title { get; set; }

        /// <summary>
        /// Body of the incident or maintenance update to be applied when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Identifier of Template Group this template belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// The status the incident or maintenance should transition to when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update_status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentTemplateUpdate_status Update_status { get; set; }

        /// <summary>
        /// Whether the "tweet update" checkbox should be selected when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("should_tweet", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Should_tweet { get; set; }

        /// <summary>
        /// Whether the "deliver notifications" checkbox should be selected when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("should_send_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Should_send_notifications { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create an incident
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdIncidents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("incident", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incident2 Incident { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get an incident
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Incident components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Component> Components { get; set; }

        /// <summary>
        /// The timestamp when the incident was created at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// The impact of the incident.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentImpact2 Impact { get; set; }

        /// <summary>
        /// value to override calculated impact value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact_override", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentImpact_override Impact_override { get; set; }

        /// <summary>
        /// The incident updates for incident.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_updates", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IncidentUpdate> Incident_updates { get; set; }

        /// <summary>
        /// The incident impacts for the incident.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_impacts", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<IncidentImpact> Incident_impacts { get; set; }

        /// <summary>
        /// Metadata attached to the incident. Top level values must be objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        /// <summary>
        /// The timestamp when incident entered monitoring state.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("monitoring_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Monitoring_at { get; set; }

        /// <summary>
        /// Incident Name. There is a maximum limit of 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Incident Page Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        /// <summary>
        /// Body of the Postmortem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Postmortem_body { get; set; }

        /// <summary>
        /// The timestamp when the incident postmortem body was last updated at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_body_last_updated_at",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Postmortem_body_last_updated_at { get; set; }

        /// <summary>
        /// Controls whether the incident will have postmortem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_ignored", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Postmortem_ignored { get; set; }

        /// <summary>
        /// Indicates whether subscribers are already notificed about postmortem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_notified_subscribers",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Postmortem_notified_subscribers { get; set; }

        /// <summary>
        /// Controls whether to decide if notify postmortem on twitter.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_notified_twitter", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Postmortem_notified_twitter { get; set; }

        /// <summary>
        /// The timestamp when the postmortem was published.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("postmortem_published_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Postmortem_published_at { get; set; }

        /// <summary>
        /// The timestamp when incident was resolved.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("resolved_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Resolved_at { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_completed", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_completed { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_in_progress", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_in_progress { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_for", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_for { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_end",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_end { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_start",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_start { get; set; }

        /// <summary>
        /// Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_maintenance_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_maintenance_state { get; set; }

        /// <summary>
        /// Controls whether change components status to operational once scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_operational_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_operational_state { get; set; }

        /// <summary>
        /// Controls whether to remind subscribers prior to scheduled incidents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_remind_prior", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_remind_prior { get; set; }

        /// <summary>
        /// The timestamp when the scheduled incident reminder was sent at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_reminded_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_reminded_at { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled until.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_until", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_until { get; set; }

        /// <summary>
        /// Incident Shortlink.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("shortlink", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Shortlink { get; set; }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentStatus Status { get; set; }

        /// <summary>
        /// The timestamp when the incident was updated at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Custom reminder intervals for unresolved/open incidents. Not applicable for &lt;strong&gt;Scheduled maintenance&lt;/strong&gt;&lt;br&gt;There are 4 possible states for reminder_intervals:&lt;br&gt;&lt;strong&gt;DEFAULT:&lt;/strong&gt; NULL, representing a default behavior with intervals [3, 6, 12, 24].&lt;br&gt;&lt;strong&gt;AFTER:&lt;/strong&gt; A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex "[1, 5, 7, 10]"&lt;br&gt;&lt;strong&gt;EVERY:&lt;/strong&gt; An integer in the range [1-24] as a string, representing equal intervals. Ex "4" for [4, 8, 12, 16, 20, 24]&lt;br&gt;&lt;strong&gt;OFF:&lt;/strong&gt; A serialized empty array, for example, "[]", meaning no reminder notifications will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_intervals", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reminder_intervals { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a previous incident update
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IncidentUpdate {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Update Identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Incident Identifier.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_id { get; set; }

        /// <summary>
        /// Affected components associated with the incident update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("affected_components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<object> Affected_components { get; set; }

        /// <summary>
        /// Incident update body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// The timestamp when the incident update was created at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        /// <summary>
        /// An optional customized tweet message for incident postmortem.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom_tweet", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom_tweet { get; set; }

        /// <summary>
        /// Controls whether to delivery notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; }

        /// <summary>
        /// Timestamp when incident update is happened.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Display_at { get; set; }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public IncidentUpdateStatus Status { get; set; }

        /// <summary>
        /// Tweet identifier associated to this incident update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tweet_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tweet_id { get; set; }

        /// <summary>
        /// The timestamp when twitter updated at.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("twitter_updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Twitter_updated_at { get; set; }

        /// <summary>
        /// The timestamp when the incident update is updated.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        /// <summary>
        /// Controls whether to create twitter update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wants_twitter_update", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Wants_twitter_update { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class IncidentImpact {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Impact Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// The tenant ID associated with the impact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("tenant_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tenant_id { get; set; }

        /// <summary>
        /// The Atlassian organization ID associated with the impact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("atlassian_organization_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Atlassian_organization_id { get; set; }

        /// <summary>
        /// The product name associated with the impact.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("product_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Product_name { get; set; }

        /// <summary>
        /// The list of experiences impacted.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("experiences", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Experiences { get; set; }

        /// <summary>
        /// The timestamp when the impact was created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update an incident
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdIncidents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("incident", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incident3 Incident { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update an incident
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdIncidents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("incident", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incident4 Incident { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a previous incident update
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdIncidentsIncidentIdIncidentUpdates {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("incident_update", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incident_update Incident_update { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a previous incident update
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdIncidentsIncidentIdIncidentUpdates {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("incident_update", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incident_update2 Incident_update { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create an incident subscriber
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdIncidentsIncidentIdSubscribers {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("subscriber", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Subscriber3 Subscriber { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Revert Postmortem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Postmortem {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Preview Key
        /// </summary>
        [Newtonsoft.Json.JsonProperty("preview_key", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Preview_key { get; set; }

        /// <summary>
        /// Postmortem body
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        [Newtonsoft.Json.JsonProperty("body_updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Body_updated_at { get; set; }

        /// <summary>
        /// Body draft
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body_draft", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body_draft { get; set; }

        [Newtonsoft.Json.JsonProperty("body_draft_updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Body_draft_updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("published_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Published_at { get; set; }

        /// <summary>
        /// Should email subscribers be notified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notify_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Notify_subscribers { get; set; }

        /// <summary>
        /// Should Twitter followers be notified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notify_twitter", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Notify_twitter { get; set; }

        /// <summary>
        /// Custom tweet for Incident Postmortem
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom_tweet", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom_tweet { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create Postmortem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdIncidentsIncidentIdPostmortem {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("postmortem", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Postmortem2 Postmortem { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Publish Postmortem
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdIncidentsIncidentIdPostmortemPublish {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("postmortem", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Postmortem3 Postmortem { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component2 Component { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component3 Component { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a component
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdComponents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("component", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component4 Component { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get uptime data for a component that has uptime showcase enabled
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ComponentUptime {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Start date used for uptime calculation (see the warnings field in the response if this value does not match the start parameter you provided).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range_start", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Range_start { get; set; }

        /// <summary>
        /// End date used for uptime calculation (see the warnings field in the response if this value does not match the end parameter you provided).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range_end", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Range_end { get; set; }

        /// <summary>
        /// Uptime percentage for a component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uptime_percentage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Uptime_percentage { get; set; }

        /// <summary>
        /// Seconds of major outage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("major_outage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Major_outage { get; set; }

        /// <summary>
        /// Seconds of partial outage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partial_outage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Partial_outage { get; set; }

        /// <summary>
        /// Warning messages related to the uptime query that may occur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warnings { get; set; }

        /// <summary>
        /// Component identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Component display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Related incidents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related_events", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Related_events Related_events { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a component group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdComponentGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Description of the component group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("component_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component_group Component_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a component group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class GroupComponent {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Component Group Identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Components { get; set; }

        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a component group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdComponentGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Updated description of the component group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("component_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component_group2 Component_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a component group
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdComponentGroups {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Updated description of the component group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        [Newtonsoft.Json.JsonProperty("component_group", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Component_group3 Component_group { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get uptime data for a component group that has uptime showcase enabled for at least one component.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ComponentGroupUptime {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Start date used for uptime calculation (see the warnings field in the response if this value does not match the start parameter you provided).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range_start", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Range_start { get; set; }

        /// <summary>
        /// End date used for uptime calculation (see the warnings field in the response if this value does not match the end parameter you provided).
        /// </summary>
        [Newtonsoft.Json.JsonProperty("range_end", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Range_end { get; set; }

        /// <summary>
        /// Uptime percentage for a component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("uptime_percentage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Uptime_percentage { get; set; }

        /// <summary>
        /// Seconds of major outage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("major_outage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Major_outage { get; set; }

        /// <summary>
        /// Seconds of partial outage
        /// </summary>
        [Newtonsoft.Json.JsonProperty("partial_outage", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Partial_outage { get; set; }

        /// <summary>
        /// Warning messages related to the uptime query that may occur
        /// </summary>
        [Newtonsoft.Json.JsonProperty("warnings", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Warnings { get; set; }

        /// <summary>
        /// Component group identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Component group display name
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Related incidents by component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("related_events", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Related_events2 Related_events { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add data points to metrics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MetricAddResponse {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Metric identifier to add data to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<Metric_id> Metric_id { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add data points to metrics
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdMetricsData {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public MetricAddResponse Data { get; set; } = new MetricAddResponse();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a metric
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metric2 Metric { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a metric
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metric3 Metric { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add data to a metric
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdMetricsMetricIdData {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public Data Data { get; set; } = new Data();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Add data to a metric
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class SingleMetricAddResponse {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data2 Data { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Delete a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class MetricsProvider {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Identifier for Metrics Provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("disabled", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Disabled { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_base_uri", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_base_uri { get; set; }

        [Newtonsoft.Json.JsonProperty("last_revalidated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Last_revalidated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Page_id { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdMetricsProviders {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metrics_provider", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metrics_provider Metrics_provider { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdMetricsProviders {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metrics_provider", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metrics_provider2 Metrics_provider { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdMetricsProviders {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metrics_provider", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metrics_provider3 Metrics_provider { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a metric for a metric provider
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostPagesPageIdMetricsProvidersMetricsProviderIdMetrics {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("metric", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Metric4 Metric { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update status embed config settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class StatusEmbedConfig {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Page identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        /// <summary>
        /// Corner where status embed iframe will appear on page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_text_color { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_text_color { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update status embed config settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PatchPagesPageIdStatusEmbedConfig {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("status_embed_config", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status_embed_config Status_embed_config { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update status embed config settings
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutPagesPageIdStatusEmbedConfig {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("status_embed_config", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Status_embed_config2 Status_embed_config { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Update a user's role permissions. Payload should contain a mapping of pages to a set of the desired roles,
    /// <br/>                  if the page has Role Based Access Control. Otherwise, the pages should map to an empty hash.
    /// <br/>                  User will lose access to any pages omitted from the payload.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PutOrganizationsOrganizationIdPermissions {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pages Pages { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a user's permissions
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Permissions {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("data", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Data3 Data { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Get a list of users
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class User {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// User identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        /// <summary>
        /// Organization identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("organization_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Organization_id { get; set; }

        /// <summary>
        /// Email address for the team member
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonProperty("created_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Created_at { get; set; }

        [Newtonsoft.Json.JsonProperty("updated_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Updated_at { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    /// <summary>
    /// Create a user
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class PostOrganizationsOrganizationIdUsers {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("user", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public User2 User { get; set; } = new User2();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"slack")]
        Slack = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"webhook")]
        Webhook = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"teams")]
        Teams = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"integration_partner")]
        Integration_partner = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum State {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unconfirmed")]
        Unconfirmed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"quarantined")]
        Quarantined = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Type2 {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"webhook")]
        Webhook = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"slack")]
        Slack = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"teams")]
        Teams = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"integration_partner")]
        Integration_partner = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum State2 {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unconfirmed")]
        Unconfirmed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"quarantined")]
        Quarantined = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Sort_field {

        [System.Runtime.Serialization.EnumMember(Value = @"primary")]
        Primary = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"created_at")]
        Created_at = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"quarantined_at")]
        Quarantined_at = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"relevance")]
        Relevance = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Sort_direction {

        [System.Runtime.Serialization.EnumMember(Value = @"asc")]
        Asc = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"desc")]
        Desc = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Body {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// List of page access users to add to component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_access_user_ids", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Page_access_user_ids { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of your page to be displayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// CNAME alias for your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>
        /// Subdomain at which to access your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subdomain { get; set; }

        /// <summary>
        /// Website of your page.  Clicking on your statuspage image will link here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The main template your statuspage will use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branding", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Page2Branding Branding { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_body_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_body_background_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_light_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_light_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_greens", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_greens { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_yellows", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_yellows { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_oranges", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_oranges { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_reds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_reds { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_blues", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_blues { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_border_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_border_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_graph_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_graph_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_link_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_link_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_no_data", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_no_data { get; set; }

        /// <summary>
        /// Should your page hide itself from search engines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hidden_from_search", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hidden_from_search { get; set; }

        [Newtonsoft.Json.JsonProperty("viewers_must_be_team_members", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Viewers_must_be_team_members { get; set; }

        /// <summary>
        /// Can your users subscribe to all notifications on the page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_page_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_page_subscribers { get; set; }

        /// <summary>
        /// Can your users subscribe to notifications for a single incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_incident_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_incident_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_email_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_email_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via SMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_sms_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_sms_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_rss_atom_feeds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_rss_atom_feeds { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via Webhooks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_webhook_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_webhook_subscribers { get; set; }

        /// <summary>
        /// Allows you to customize the email address your page notifications come from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_from_email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_from_email { get; set; }

        /// <summary>
        /// Timezone configured for your page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time_zone", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time_zone { get; set; }

        /// <summary>
        /// Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_email_footer", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_email_footer { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of your page to be displayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// CNAME alias for your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("domain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Domain { get; set; }

        /// <summary>
        /// Subdomain at which to access your status page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("subdomain", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Subdomain { get; set; }

        /// <summary>
        /// Website of your page.  Clicking on your statuspage image will link here.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("url", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Url { get; set; }

        /// <summary>
        /// The main template your statuspage will use
        /// </summary>
        [Newtonsoft.Json.JsonProperty("branding", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Page3Branding Branding { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_body_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_body_background_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_light_font_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_light_font_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_greens", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_greens { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_yellows", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_yellows { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_oranges", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_oranges { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_reds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_reds { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_blues", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_blues { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_border_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_border_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_graph_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_graph_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_link_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_link_color { get; set; }

        /// <summary>
        /// CSS Color
        /// </summary>
        [Newtonsoft.Json.JsonProperty("css_no_data", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Css_no_data { get; set; }

        /// <summary>
        /// Should your page hide itself from search engines
        /// </summary>
        [Newtonsoft.Json.JsonProperty("hidden_from_search", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Hidden_from_search { get; set; }

        [Newtonsoft.Json.JsonProperty("viewers_must_be_team_members", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Viewers_must_be_team_members { get; set; }

        /// <summary>
        /// Can your users subscribe to all notifications on the page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_page_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_page_subscribers { get; set; }

        /// <summary>
        /// Can your users subscribe to notifications for a single incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_incident_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_incident_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via email
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_email_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_email_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via SMS
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_sms_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_sms_subscribers { get; set; }

        /// <summary>
        /// Can your users choose to access incident feeds via RSS/Atom (not functional on Audience-Specific pages)
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_rss_atom_feeds", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_rss_atom_feeds { get; set; }

        /// <summary>
        /// Can your users choose to receive notifications via Webhooks
        /// </summary>
        [Newtonsoft.Json.JsonProperty("allow_webhook_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Allow_webhook_subscribers { get; set; }

        /// <summary>
        /// Allows you to customize the email address your page notifications come from
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_from_email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_from_email { get; set; }

        /// <summary>
        /// Timezone configured for your page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("time_zone", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Time_zone { get; set; }

        /// <summary>
        /// Allows you to customize the footer appearing on your notification emails.  Accepts Markdown for formatting
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notifications_email_footer", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Notifications_email_footer { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page_access_user {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// IDP login user id. Key is typically "uid".
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_login", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_login { get; set; }

        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_group_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Page_access_group_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("subscribe_to_components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Subscribe_to_components { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum ComponentStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page_access_group {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name for this Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Associates group with external group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_user_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Page_access_user_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page_access_group2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name for this Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Associates group with external group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_user_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Page_access_user_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page_access_group3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name for this Group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Associates group with external group.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("external_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string External_identifier { get; set; }

        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Metric_ids { get; set; }

        [Newtonsoft.Json.JsonProperty("page_access_user_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Page_access_user_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PostPagesPageIdSubscribersUnsubscribeType {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"slack")]
        Slack = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"webhook")]
        Webhook = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"teams")]
        Teams = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"integration_partner")]
        Integration_partner = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PostPagesPageIdSubscribersUnsubscribeState {

        [System.Runtime.Serialization.EnumMember(Value = @"active")]
        Active = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"unconfirmed")]
        Unconfirmed = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"quarantined")]
        Quarantined = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"all")]
        All = 3,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum PostPagesPageIdSubscribersReactivateType {

        [System.Runtime.Serialization.EnumMember(Value = @"email")]
        Email = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"sms")]
        Sms = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"slack")]
        Slack = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"webhook")]
        Webhook = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"integration_partner")]
        Integration_partner = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Subscriber2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The email address for creating Email and Webhook subscribers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The endpoint URI for creating Webhook subscribers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("endpoint", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Endpoint { get; set; }

        /// <summary>
        /// The two-character country where the phone number is located to use for the new SMS subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_country", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_country { get; set; }

        /// <summary>
        /// The phone number (as you would dial from the phone_country) to use for the new SMS subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_number { get; set; }

        /// <summary>
        /// If skip_confirmation_notification is true, the subscriber does not receive any notifications when their subscription changes.  Email subscribers will be automatically opted in. This option is only available for paid pages. This option has no effect for trial customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_confirmation_notification",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_confirmation_notification { get; set; }

        /// <summary>
        /// The code of the page access user to which the subscriber belongs.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_access_user", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_access_user { get; set; }

        /// <summary>
        /// A list of component ids for which the subscriber should recieve updates for. Components must be an array with at least one element if it is passed at all. Each component must belong to the page indicated in the path.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Template {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of the template, as shown in the list on the "Templates" tab of the "Incidents" page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// Title to be applied to the incident or maintenance when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("title", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Title { get; set; }

        /// <summary>
        /// The initial message, created as the first incident or maintenance update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body { get; set; }

        /// <summary>
        /// Identifier of Template Group this template belongs to
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// The status the incident or maintenance should transition to when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("update_status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public TemplateUpdate_status Update_status { get; set; }

        /// <summary>
        /// Whether the "tweet update" checkbox should be selected when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("should_tweet", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Should_tweet { get; set; }

        /// <summary>
        /// Whether the "deliver notifications" checkbox should be selected when selecting this template
        /// </summary>
        [Newtonsoft.Json.JsonProperty("should_send_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Should_send_notifications { get; set; }

        /// <summary>
        /// List of component_ids affected by this incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IncidentTemplateUpdate_status {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Name. There is a maximum limit of 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident2Status Status { get; set; }

        /// <summary>
        /// value to override calculated impact value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact_override", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident2Impact_override Impact_override { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_for", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_for { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled until.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_until", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_until { get; set; }

        /// <summary>
        /// Controls whether to remind subscribers prior to scheduled incidents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_remind_prior", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_remind_prior { get; set; }

        /// <summary>
        /// Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_maintenance_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_maintenance_state { get; set; }

        /// <summary>
        /// Controls whether change components status to operational once scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_operational_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_operational_state { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_in_progress", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_in_progress { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_completed", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_completed { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_start",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_start { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_end",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_end { get; set; }

        /// <summary>
        /// Custom reminder intervals for unresolved/open incidents. Not applicable for &lt;strong&gt;Scheduled maintenance&lt;/strong&gt;&lt;br&gt;There are 4 possible states for reminder_intervals:&lt;br&gt;&lt;strong&gt;DEFAULT:&lt;/strong&gt; NULL, representing a default behavior with intervals [3, 6, 12, 24].&lt;br&gt;&lt;strong&gt;AFTER:&lt;/strong&gt; A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex "[1, 5, 7, 10]"&lt;br&gt;&lt;strong&gt;EVERY:&lt;/strong&gt; An integer in the range [1-24] as a string, representing equal intervals. Ex "4" for [4, 8, 12, 16, 20, 24]&lt;br&gt;&lt;strong&gt;OFF:&lt;/strong&gt; A serialized empty array, for example, "[]", meaning no reminder notifications will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_intervals", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reminder_intervals { get; set; }

        /// <summary>
        /// Attach a json object to the incident. All top-level values in the object must also be objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        /// <summary>
        /// Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; } = true;

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_at_beginning", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_at_beginning { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_completion", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_completion { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_creation", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_creation { get; set; }

        /// <summary>
        /// Controls whether tweet automatically one hour before scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_one_hour_before", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_one_hour_before { get; set; }

        /// <summary>
        /// TimeStamp when incident was backfilled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfill_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Backfill_date { get; set; }

        /// <summary>
        /// Controls whether incident is backfilled. If true, components cannot be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfilled", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Backfilled { get; set; }

        /// <summary>
        /// The initial message, created as the first incident update. There is a maximum limit of 25000 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Components Components { get; set; }

        /// <summary>
        /// List of component_ids affected by this incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        /// <summary>
        /// Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_transition", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_transition { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IncidentImpact2 {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"maintenance")]
        Maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"minor")]
        Minor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"major")]
        Major = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IncidentImpact_override {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"maintenance")]
        Maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"minor")]
        Minor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"major")]
        Major = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IncidentStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum IncidentUpdateStatus {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Name. There is a maximum limit of 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident3Status Status { get; set; }

        /// <summary>
        /// value to override calculated impact value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact_override", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident3Impact_override Impact_override { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_for", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_for { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled until.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_until", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_until { get; set; }

        /// <summary>
        /// Controls whether to remind subscribers prior to scheduled incidents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_remind_prior", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_remind_prior { get; set; }

        /// <summary>
        /// Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_maintenance_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_maintenance_state { get; set; }

        /// <summary>
        /// Controls whether change components status to operational once scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_operational_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_operational_state { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_in_progress", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_in_progress { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_completed", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_completed { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_start",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_start { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_end",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_end { get; set; }

        /// <summary>
        /// Custom reminder intervals for unresolved/open incidents. Not applicable for &lt;strong&gt;Scheduled maintenance&lt;/strong&gt;&lt;br&gt;There are 4 possible states for reminder_intervals:&lt;br&gt;&lt;strong&gt;DEFAULT:&lt;/strong&gt; NULL, representing a default behavior with intervals [3, 6, 12, 24].&lt;br&gt;&lt;strong&gt;AFTER:&lt;/strong&gt; A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex "[1, 5, 7, 10]"&lt;br&gt;&lt;strong&gt;EVERY:&lt;/strong&gt; An integer in the range [1-24] as a string, representing equal intervals. Ex "4" for [4, 8, 12, 16, 20, 24]&lt;br&gt;&lt;strong&gt;OFF:&lt;/strong&gt; A serialized empty array, for example, "[]", meaning no reminder notifications will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_intervals", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reminder_intervals { get; set; }

        /// <summary>
        /// Attach a json object to the incident. All top-level values in the object must also be objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        /// <summary>
        /// Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; } = true;

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_at_beginning", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_at_beginning { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_completion", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_completion { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_creation", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_creation { get; set; }

        /// <summary>
        /// Controls whether tweet automatically one hour before scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_one_hour_before", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_one_hour_before { get; set; }

        /// <summary>
        /// TimeStamp when incident was backfilled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfill_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Backfill_date { get; set; }

        /// <summary>
        /// Controls whether incident is backfilled. If true, components cannot be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfilled", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Backfilled { get; set; }

        /// <summary>
        /// The initial message, created as the first incident update. There is a maximum limit of 25000 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Components2 Components { get; set; }

        /// <summary>
        /// List of component_ids affected by this incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        /// <summary>
        /// Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_transition", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_transition { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident4 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident Name. There is a maximum limit of 255 characters.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The incident status. For realtime incidents, valid values are investigating, identified, monitoring, and resolved. For scheduled incidents, valid values are scheduled, in_progress, verifying, and completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident4Status Status { get; set; }

        /// <summary>
        /// value to override calculated impact value
        /// </summary>
        [Newtonsoft.Json.JsonProperty("impact_override", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Incident4Impact_override Impact_override { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled for.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_for", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_for { get; set; }

        /// <summary>
        /// The timestamp the incident is scheduled until.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_until", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Scheduled_until { get; set; }

        /// <summary>
        /// Controls whether to remind subscribers prior to scheduled incidents.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_remind_prior", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_remind_prior { get; set; }

        /// <summary>
        /// Controls whether change components status to under_maintenance once scheduled maintenance is in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_maintenance_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_maintenance_state { get; set; }

        /// <summary>
        /// Controls whether change components status to operational once scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_to_operational_state",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_to_operational_state { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_in_progress", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_in_progress { get; set; }

        /// <summary>
        /// Controls whether the incident is scheduled to automatically change to complete.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_completed", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_completed { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to started.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_start",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_start { get; set; }

        /// <summary>
        /// Controls whether send notification when scheduled maintenances auto transition to completed.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_transition_deliver_notifications_at_end",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_transition_deliver_notifications_at_end { get; set; }

        /// <summary>
        /// Custom reminder intervals for unresolved/open incidents. Not applicable for &lt;strong&gt;Scheduled maintenance&lt;/strong&gt;&lt;br&gt;There are 4 possible states for reminder_intervals:&lt;br&gt;&lt;strong&gt;DEFAULT:&lt;/strong&gt; NULL, representing a default behavior with intervals [3, 6, 12, 24].&lt;br&gt;&lt;strong&gt;AFTER:&lt;/strong&gt; A serialized array of strictly increasing intervals, each integer ranges from [1-24] (inclusive). Ex "[1, 5, 7, 10]"&lt;br&gt;&lt;strong&gt;EVERY:&lt;/strong&gt; An integer in the range [1-24] as a string, representing equal intervals. Ex "4" for [4, 8, 12, 16, 20, 24]&lt;br&gt;&lt;strong&gt;OFF:&lt;/strong&gt; A serialized empty array, for example, "[]", meaning no reminder notifications will be sent.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("reminder_intervals", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Reminder_intervals { get; set; }

        /// <summary>
        /// Attach a json object to the incident. All top-level values in the object must also be objects.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metadata", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public object Metadata { get; set; }

        /// <summary>
        /// Deliver notifications to subscribers if this is true. If this is false, create an incident without notifying customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; } = true;

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_at_beginning", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_at_beginning { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance completes.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_completion", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_completion { get; set; }

        /// <summary>
        /// Controls whether tweet automatically when scheduled maintenance is created.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_on_creation", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_on_creation { get; set; }

        /// <summary>
        /// Controls whether tweet automatically one hour before scheduled maintenance starts.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("auto_tweet_one_hour_before", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Auto_tweet_one_hour_before { get; set; }

        /// <summary>
        /// TimeStamp when incident was backfilled.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfill_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Backfill_date { get; set; }

        /// <summary>
        /// Controls whether incident is backfilled. If true, components cannot be specified.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("backfilled", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Backfilled { get; set; }

        /// <summary>
        /// The initial message, created as the first incident update. There is a maximum limit of 25000 characters
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Components3 Components { get; set; }

        /// <summary>
        /// List of component_ids affected by this incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_ids", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.Collections.Generic.ICollection<string> Component_ids { get; set; }

        /// <summary>
        /// Same as :scheduled_auto_transition_in_progress. Controls whether the incident is scheduled to automatically change to in progress.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("scheduled_auto_transition", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Scheduled_auto_transition { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident_update {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Controls whether to create twitter update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wants_twitter_update", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Wants_twitter_update { get; set; }

        /// <summary>
        /// Incident update body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Timestamp when incident update is happened.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Display_at { get; set; }

        /// <summary>
        /// Controls whether to delivery notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incident_update2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Controls whether to create twitter update.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("wants_twitter_update", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Wants_twitter_update { get; set; }

        /// <summary>
        /// Incident update body.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Body { get; set; }

        /// <summary>
        /// Timestamp when incident update is happened.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display_at", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public System.DateTimeOffset Display_at { get; set; }

        /// <summary>
        /// Controls whether to delivery notifications.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("deliver_notifications", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Deliver_notifications { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Subscriber3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// The email address for creating Email subscribers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// The two-character country where the phone number is located to use for the new SMS subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_country", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_country { get; set; }

        /// <summary>
        /// The phone number (as you would dial from the phone_country) to use for the new SMS subscriber.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("phone_number", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Phone_number { get; set; }

        /// <summary>
        /// If skip_confirmation_notification is true, the subscriber does not receive any notifications when their subscription changes. Email subscribers will be automatically opted in. This option is only available for paid pages. This option has no effect for trial customers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("skip_confirmation_notification",
            Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Skip_confirmation_notification { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Postmortem2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Body of Postmortem to create.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("body_draft", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Body_draft { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Postmortem3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Whether to notify Twitter followers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notify_twitter", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Notify_twitter { get; set; }

        /// <summary>
        /// Whether to notify e-mail subscribers
        /// </summary>
        [Newtonsoft.Json.JsonProperty("notify_subscribers", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Notify_subscribers { get; set; }

        /// <summary>
        /// Custom postmortem tweet to publish
        /// </summary>
        [Newtonsoft.Json.JsonProperty("custom_tweet", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Custom_tweet { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// More detailed description for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Status of component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Component2Status Status { get; set; }

        /// <summary>
        /// Display name for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Requires a special feature flag to be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("only_show_if_degraded", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Only_show_if_degraded { get; set; }

        /// <summary>
        /// Component Group identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showcase", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Showcase { get; set; }

        /// <summary>
        /// The date this component started being used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Start_date { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// More detailed description for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Status of component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Component3Status Status { get; set; }

        /// <summary>
        /// Display name for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Requires a special feature flag to be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("only_show_if_degraded", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Only_show_if_degraded { get; set; }

        /// <summary>
        /// Component Group identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showcase", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Showcase { get; set; }

        /// <summary>
        /// The date this component started being used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Start_date { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component4 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// More detailed description for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Description { get; set; }

        /// <summary>
        /// Status of component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("status", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Component4Status Status { get; set; }

        /// <summary>
        /// Display name for component
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Requires a special feature flag to be enabled
        /// </summary>
        [Newtonsoft.Json.JsonProperty("only_show_if_degraded", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Only_show_if_degraded { get; set; }

        /// <summary>
        /// Component Group identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("group_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Group_id { get; set; }

        /// <summary>
        /// Should this component be showcased
        /// </summary>
        [Newtonsoft.Json.JsonProperty("showcase", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Showcase { get; set; }

        /// <summary>
        /// The date this component started being used
        /// </summary>
        [Newtonsoft.Json.JsonProperty("start_date", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(DateFormatConverter))]
        public System.DateTimeOffset Start_date { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Related_events {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component_group {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Components { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component_group2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Components { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Component_group3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("components", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required]
        public System.Collections.Generic.ICollection<string> Components { get; set; } =
            new System.Collections.ObjectModel.Collection<string>();

        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.Always)]
        [System.ComponentModel.DataAnnotations.Required(AllowEmptyStrings = true)]
        public string Name { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Related_events2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Component identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("component_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Component_id { get; set; }

        /// <summary>
        /// Related incidents
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incidents", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Incidents Incidents { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metric_id {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metric2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of metric
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Metric Display identifier used to look up the metric data from the provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_identifier { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metric3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of metric
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// Metric Display identifier used to look up the metric data from the provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_identifier { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Data {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Time to store the metric against
        /// </summary>
        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Data2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("timestamp", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Timestamp { get; set; }

        [Newtonsoft.Json.JsonProperty("value", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public float Value { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metrics_provider {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Required by the Librato metrics provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        /// <summary>
        /// Required by the Datadog and NewRelic type metrics providers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_key", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_key { get; set; }

        /// <summary>
        /// Required by the Librato, Datadog and Pingdom type metrics providers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("api_token", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Api_token { get; set; }

        /// <summary>
        /// Required by the Pingdom-type metrics provider.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application_key", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application_key { get; set; }

        /// <summary>
        /// One of "Pingdom", "NewRelic", "Librato", "Datadog", or "Self"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        /// <summary>
        /// Required by the Datadog and NewRelic type metrics providers.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_base_uri", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_base_uri { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metrics_provider2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_base_uri", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_base_uri { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metrics_provider3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("type", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Type { get; set; }

        [Newtonsoft.Json.JsonProperty("metric_base_uri", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_base_uri { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Metric4 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Name of metric
        /// </summary>
        [Newtonsoft.Json.JsonProperty("name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Name { get; set; }

        /// <summary>
        /// The identifier used to look up the metric data from the provider
        /// </summary>
        [Newtonsoft.Json.JsonProperty("metric_identifier", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Metric_identifier { get; set; }

        /// <summary>
        /// The transform to apply to metric before pulling into Statuspage. One of: "average", "count", "max", "min", or "sum"
        /// </summary>
        [Newtonsoft.Json.JsonProperty("transform", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Transform { get; set; }

        /// <summary>
        /// The Identifier for new relic application. Required in the case of NewRelic only
        /// </summary>
        [Newtonsoft.Json.JsonProperty("application_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Application_id { get; set; }

        /// <summary>
        /// Suffix to describe the units on the graph
        /// </summary>
        [Newtonsoft.Json.JsonProperty("suffix", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Suffix { get; set; }

        /// <summary>
        /// The lower bound of the y axis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y_axis_min", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y_axis_min { get; set; }

        /// <summary>
        /// The upper bound of the y axis
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y_axis_max", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Y_axis_max { get; set; }

        /// <summary>
        /// Should the values on the y axis be hidden on render
        /// </summary>
        [Newtonsoft.Json.JsonProperty("y_axis_hidden", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Y_axis_hidden { get; set; }

        /// <summary>
        /// Should the metric be displayed
        /// </summary>
        [Newtonsoft.Json.JsonProperty("display", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Display { get; set; }

        /// <summary>
        /// How many decimal places to render on the graph
        /// </summary>
        [Newtonsoft.Json.JsonProperty("decimal_places", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public int Decimal_places { get; set; }

        [Newtonsoft.Json.JsonProperty("tooltip_description", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Tooltip_description { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Status_embed_config {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Corner where status embed iframe will appear on page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_text_color { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_text_color { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Status_embed_config2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Corner where status embed iframe will appear on page
        /// </summary>
        [Newtonsoft.Json.JsonProperty("position", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Position { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying incident
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Incident_text_color { get; set; }

        /// <summary>
        /// Color of status embed iframe background when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_background_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_background_color { get; set; }

        /// <summary>
        /// Color of status embed iframe text when displaying maintenance
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_text_color", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Maintenance_text_color { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Pages {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Page_id Page_id { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Data3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// User identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("user_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string User_id { get; set; }

        /// <summary>
        /// Pages accessible by the user.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("pages", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public Pages2 Pages { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class User2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Email address for the team member
        /// </summary>
        [Newtonsoft.Json.JsonProperty("email", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Email { get; set; }

        /// <summary>
        /// Password the team member uses to access the site
        /// </summary>
        [Newtonsoft.Json.JsonProperty("password", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Password { get; set; }

        [Newtonsoft.Json.JsonProperty("first_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string First_name { get; set; }

        [Newtonsoft.Json.JsonProperty("last_name", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Last_name { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Page2Branding {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"premium")]
        Premium = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Page3Branding {

        [System.Runtime.Serialization.EnumMember(Value = @"basic")]
        Basic = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"premium")]
        Premium = 1,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum TemplateUpdate_status {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident2Status {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident2Impact_override {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"maintenance")]
        Maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"minor")]
        Minor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"major")]
        Major = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Components {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("2y6527s0bj94", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Components_2y6527s0bj94 _2y6527s0bj94 { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident3Status {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident3Impact_override {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"maintenance")]
        Maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"minor")]
        Minor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"major")]
        Major = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Components2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xb63q9zglmyk", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Components2Xb63q9zglmyk Xb63q9zglmyk { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident4Status {

        [System.Runtime.Serialization.EnumMember(Value = @"investigating")]
        Investigating = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"identified")]
        Identified = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"monitoring")]
        Monitoring = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"resolved")]
        Resolved = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"scheduled")]
        Scheduled = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"in_progress")]
        In_progress = 5,

        [System.Runtime.Serialization.EnumMember(Value = @"verifying")]
        Verifying = 6,

        [System.Runtime.Serialization.EnumMember(Value = @"completed")]
        Completed = 7,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Incident4Impact_override {

        [System.Runtime.Serialization.EnumMember(Value = @"none")]
        None = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"maintenance")]
        Maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"minor")]
        Minor = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"major")]
        Major = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"critical")]
        Critical = 4,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Components3 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Map of status changes to apply to affected components
        /// </summary>
        [Newtonsoft.Json.JsonProperty("xb63q9zglmyk", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        [Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public Components3Xb63q9zglmyk Xb63q9zglmyk { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Component2Status {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Component3Status {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Component4Status {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Incidents {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Incident identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Id { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Page_id {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Whether or not user should have page configuration role. This field will only be present for pages with Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_configuration", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Page_configuration { get; set; }

        /// <summary>
        /// Whether or not user should have incident manager role. This field will only be present for pages with Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_manager", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Incident_manager { get; set; }

        /// <summary>
        /// Whether or not user should have maintenance manager role. This field will only be present for pages with Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_manager", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Maintenance_manager { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class Pages2 {
        private System.Collections.Generic.IDictionary<string, object> _additionalProperties;

        /// <summary>
        /// Page identifier
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_id", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public string Page_id { get; set; }

        /// <summary>
        /// User has page configuration role. This field will only be present if the organization has Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("page_configuration", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Page_configuration { get; set; }

        /// <summary>
        /// User has incident manager role. This field will only be present if the organization has Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("incident_manager", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Incident_manager { get; set; }

        /// <summary>
        /// User has maintenance manager role. This field will only be present if the organization has Role Based Access Control.
        /// </summary>
        [Newtonsoft.Json.JsonProperty("maintenance_manager", Required = Newtonsoft.Json.Required.DisallowNull,
            NullValueHandling = Newtonsoft.Json.NullValueHandling.Ignore)]
        public bool Maintenance_manager { get; set; }

        [Newtonsoft.Json.JsonExtensionData]
        public System.Collections.Generic.IDictionary<string, object> AdditionalProperties {
            get {
                return _additionalProperties ??
                       (_additionalProperties = new System.Collections.Generic.Dictionary<string, object>());
            }
            set { _additionalProperties = value; }
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Components_2y6527s0bj94 {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Components2Xb63q9zglmyk {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public enum Components3Xb63q9zglmyk {

        [System.Runtime.Serialization.EnumMember(Value = @"operational")]
        Operational = 0,

        [System.Runtime.Serialization.EnumMember(Value = @"under_maintenance")]
        Under_maintenance = 1,

        [System.Runtime.Serialization.EnumMember(Value = @"degraded_performance")]
        Degraded_performance = 2,

        [System.Runtime.Serialization.EnumMember(Value = @"partial_outage")]
        Partial_outage = 3,

        [System.Runtime.Serialization.EnumMember(Value = @"major_outage")]
        Major_outage = 4,

        [System.Runtime.Serialization.EnumMember(Value = @"")]
        Empty = 5,

    }

    [System.CodeDom.Compiler.GeneratedCode("NJsonSchema",
        "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    internal class DateFormatConverter : Newtonsoft.Json.Converters.IsoDateTimeConverter {
        public DateFormatConverter() {
            DateTimeFormat = "yyyy-MM-dd";
        }
    }



    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException : System.Exception {
        public ApiException(string message, int statusCode, string response,
            System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
                headers, System.Exception innerException)
            : base(
                message + "\n\nStatus: " + statusCode + "\nResponse: \n" + ((response == null)
                    ? "(null)"
                    : response.Substring(0, response.Length >= 512 ? 512 : response.Length)), innerException) {
            StatusCode = statusCode;
            Response = response;
            Headers = headers;
        }

        public int StatusCode { get; private set; }

        public string Response { get; private set; }

        public System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
            Headers { get; private set; }

        public override string ToString() {
            return string.Format("HTTP Response: \n\n{0}\n\n{1}", Response, base.ToString());
        }
    }

    [System.CodeDom.Compiler.GeneratedCode("NSwag", "13.18.2.0 (NJsonSchema v10.8.0.0 (Newtonsoft.Json v11.0.0.0))")]
    public partial class ApiException<TResult> : ApiException {
        public ApiException(string message, int statusCode, string response,
            System.Collections.Generic.IReadOnlyDictionary<string, System.Collections.Generic.IEnumerable<string>>
                headers, TResult result, System.Exception innerException)
            : base(message, statusCode, response, headers, innerException) {
            Result = result;
        }

        public TResult Result { get; private set; }
    }
}